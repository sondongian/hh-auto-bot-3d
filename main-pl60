// Ph√∫c L·ª£i
(function () {
  const ACTIVITY_NAME = "üéÅ Ho·∫°t ƒë·ªông: Ph√∫c L·ª£i";
  let countdown = 3;

  // Inject confetti n·∫øu ch∆∞a c√≥
  if (!window.confetti) {
    const script = document.createElement("script");
    script.src = "https://cdn.jsdelivr.net/npm/canvas-confetti@1.6.0/dist/confetti.browser.min.js";
    document.head.appendChild(script);
  }

  // CSS hi·ªáu ·ª©ng rainbow + rung
  const style = document.createElement("style");
  style.textContent = `
    @keyframes rainbow {
      0% { color: red; }
      16% { color: orange; }
      32% { color: yellow; }
      48% { color: green; }
      64% { color: blue; }
      80% { color: indigo; }
      100% { color: violet; }
    }
    @keyframes shake {
      0%, 100% { transform: translateX(0); }
      25% { transform: translateX(-3px); }
      50% { transform: translateX(3px); }
      75% { transform: translateX(-3px); }
    }
    .rainbow-icon {
      display: inline-block;
      animation: rainbow 2s infinite linear, shake 0.6s infinite;
      font-size: 20px;
    }
  `;
  document.head.appendChild(style);

  // Giao di·ªán ƒë·∫øm ng∆∞·ª£c
  const countdownDiv = document.createElement("div");
  countdownDiv.style.position = "fixed";
  countdownDiv.style.top = "20px";
  countdownDiv.style.right = "20px";
  countdownDiv.style.padding = "15px 20px";
  countdownDiv.style.background = "#222";
  countdownDiv.style.color = "#fff";
  countdownDiv.style.borderRadius = "10px";
  countdownDiv.style.boxShadow = "0 0 10px rgba(0,0,0,0.3)";
  countdownDiv.style.zIndex = 9999;
  countdownDiv.style.fontSize = "16px";
  countdownDiv.style.fontFamily = "Segoe UI, sans-serif";
  document.body.appendChild(countdownDiv);

  const timer = setInterval(() => {
    countdownDiv.innerHTML = `
      <strong>${ACTIVITY_NAME}</strong><br>
      ‚è≥ B·∫Øt ƒë·∫ßu sau ${countdown} gi√¢y...
    `;
    if (countdown <= 0) {
      clearInterval(timer);
      countdownDiv.remove();
      runPhucLoi();
    }
    countdown--;
  }, 1000);

  async function runPhucLoi() {
    const PL_URL = 'https://hoathinh3d.team/phuc-loi-duong';
    const API_URL = 'https://hoathinh3d.team/wp-content/themes/halimmovies-child/hh3d-ajax.php';

    const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

    function showNotification(type, title, message) {
      const wrapper = document.createElement("div");
      wrapper.style.position = "fixed";
      wrapper.style.bottom = "20px";
      wrapper.style.right = "20px";
      wrapper.style.maxWidth = "320px";
      wrapper.style.backgroundColor = type === "success" ? "#d4edda" : "#f8d7da";
      wrapper.style.color = type === "success" ? "#155724" : "#721c24";
      wrapper.style.border = "1px solid";
      wrapper.style.borderColor = type === "success" ? "#c3e6cb" : "#f5c6cb";
      wrapper.style.padding = "15px";
      wrapper.style.borderRadius = "8px";
      wrapper.style.boxShadow = "0 0 10px rgba(0,0,0,0.2)";
      wrapper.style.zIndex = 9999;
      wrapper.style.fontFamily = "sans-serif";
      wrapper.style.opacity = 0;
      wrapper.style.transition = "opacity 0.5s ease";

      const icon = type === "success" ? "‚úÖ" : "‚ùå";
      const animatedIcon = `<span class="rainbow-icon">${icon}</span>`;

      wrapper.innerHTML = `
        <strong style="display:block;margin-bottom:5px;">
          ${animatedIcon} ${title}
        </strong>
        <div style="margin-bottom:10px;">${message}</div>
      `;

      document.body.appendChild(wrapper);
      requestAnimationFrame(() => (wrapper.style.opacity = 1));
      setTimeout(() => {
        wrapper.style.opacity = 0;
        setTimeout(() => wrapper.remove(), 600);
      }, 8000);
    }

    async function fetchHTML(url) {
      const res = await fetch(url);
      return await res.text();
    }

    function parseSecurity(html, type) {
      const scripts = Array.from(html.matchAll(/<script\b[^>]*>([\s\S]*?)<\/script>/gi));
      for (const [, content] of scripts) {
        if (content.includes(type)) {
          const match = content.match(/security\s*:\s*['"]([a-f0-9]{10,})['"]/i);
          if (match) return match[1];
        }
      }
      return null;
    }

    async function getNextChestPL(security) {
      const formData = new FormData();
      formData.append('action', 'get_next_time_pl');
      formData.append('security', security);
      const res = await fetch(API_URL, { method: 'POST', body: formData });
      const json = await res.json();
      return json?.data || null;
    }

    async function openChestPL(security, chest_id) {
      const formData = new FormData();
      formData.append('action', 'open_chest_pl');
      formData.append('security', security);
      formData.append('chest_id', chest_id);

      const res = await fetch(API_URL, { method: 'POST', body: formData });
      const json = await res.json();

      if (json.success) {
        showNotification('success', `R∆∞∆°ng ${chest_id}`, json.data.message);
        console.log(`[PhucLoi] ‚úÖ M·ªü r∆∞∆°ng ${chest_id}: ${json.data.message}`);
        if (window.confetti) confetti({ particleCount: 100, spread: 60, origin: { y: 0.6 } });
        return json.data?.next_chest || null;
      } else {
        showNotification('error', `L·ªói m·ªü r∆∞∆°ng ${chest_id}`, json.data?.message || 'Kh√¥ng r√µ l·ªói');
        return null;
      }
    }

    async function claimMilestonesPL(security) {
      const activeGifts = document.querySelectorAll('.gift-box.active');
      for (const box of activeGifts) {
        const chestId = box.getAttribute('data-id') || '1';

        const formData = new FormData();
        formData.append('action', 'claim_bonus_reward');
        formData.append('security', security);
        formData.append('chest_id', chestId);

        const res = await fetch(API_URL, { method: 'POST', body: formData });
        const json = await res.json();

        if (json.success) {
          showNotification('success', 'üéÅ M·ªëc th∆∞·ªüng', `ƒê√£ nh·∫≠n m·ªëc r∆∞∆°ng ${chestId}`);
          if (window.confetti) confetti({ particleCount: 80, spread: 70 });
        } else {
          showNotification('error', 'L·ªói nh·∫≠n m·ªëc', json?.data?.message || 'Kh√¥ng r√µ l·ªói');
        }
      }
    }

    const html = await fetchHTML(PL_URL);
    const security = parseSecurity(html, 'get_next_time_pl');
    if (!security) return showNotification('error', 'Kh√¥ng t√¨m th·∫•y token', 'Security token kh√¥ng c√≥');

    const status = await getNextChestPL(security);
    if (!status || (status.reset_rewards === null && status.chest_level === "4")) {
      return showNotification('success', 'Ho√†n th√†nh', 'ƒê√£ m·ªü ƒë·ªß 4 r∆∞∆°ng h√¥m nay!');
    }

    let currentChest = parseInt(status.chest_level || '0') + 1;

    while (currentChest <= 4) {
      await openChestPL(security, currentChest);
      currentChest++;
      if (currentChest <= 4) {
        await delay(60 * 60 * 1000); // ƒê·ª£i 60 ph√∫t
      }
    }

    await claimMilestonesPL(security);
    showNotification('success', 'üéâ Ho√†n t·∫•t Ph√∫c L·ª£i', 'ƒê√£ m·ªü h·∫øt r∆∞∆°ng v√† nh·∫≠n m·ªëc!');
    if (window.confetti) confetti({ particleCount: 200, spread: 90 });
  }
})();
