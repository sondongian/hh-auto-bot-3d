(async function runQuizConsole() {
  const DOMAIN = 'https://hoathinh3d.team';
  const HH3D_AJAX_URL = DOMAIN + '/wp-content/themes/halimmovies-child/hh3d-ajax.php';

  // H√†m g·ª≠i POST request
  async function postRequest(url, headers, body) {
    try {
      const response = await fetch(url, {
        method: 'POST',
        headers: headers,
        body: body
      });
      return await response.json();
    } catch (error) {
      console.error('<Logger>', `üî¥ L·ªói khi POST ƒë·∫øn ${url}:`, error);
      return { success: false, error: error };
    }
  }

  // H√†m hi·ªÉn th·ªã notification UI
  function showNotificationUI(message, type = "success") {
    let container = document.querySelector('.quiz-notification-container');
    if (!container) {
      container = document.createElement('div');
      container.className = 'quiz-notification-container';
      container.style.position = 'fixed';
      container.style.top = '20px';
      container.style.right = '20px';
      container.style.zIndex = '9999';
      container.style.display = 'flex';
      container.style.flexDirection = 'column';
      container.style.gap = '10px';
      document.body.appendChild(container);
    }

    const box = document.createElement('div');
    box.style.padding = '12px 16px';
    box.style.borderRadius = '8px';
    box.style.color = 'white';
    box.style.fontSize = '14px';
    box.style.fontFamily = 'Arial, sans-serif';
    box.style.boxShadow = '0 4px 12px rgba(0,0,0,0.3)';
    box.style.backgroundColor = type === "success" ? '#28a745' : '#dc3545';
    box.style.opacity = '0';
    box.style.transform = 'translateX(30px)';
    box.style.transition = 'all 0.4s ease';

    box.innerHTML = message;
    container.appendChild(box);

    requestAnimationFrame(() => {
      box.style.opacity = '1';
      box.style.transform = 'translateX(0)';
    });

    setTimeout(() => {
      box.style.opacity = '0';
      box.style.transform = 'translateX(30px)';
      setTimeout(() => box.remove(), 400);
    }, 1000);
  }

  const latinMap = {
    // Vietnamese
    '√Ä':'A','√Å':'A','·∫¢':'A','√É':'A','·∫†':'A','ƒÇ':'A','·∫∞':'A','·∫Æ':'A','·∫≤':'A','·∫¥':'A','·∫∂':'A','√Ç':'A','·∫¶':'A','·∫§':'A','·∫®':'A','·∫™':'A','·∫¨':'A',
    'ƒê':'D','√à':'E','√â':'E','·∫∫':'E','·∫º':'E','·∫∏':'E','√ä':'E','·ªÄ':'E','·∫æ':'E','·ªÇ':'E','·ªÑ':'E','·ªÜ':'E','√å':'I','√ç':'I','·ªà':'I','ƒ®':'I','·ªä':'I',
    '√í':'O','√ì':'O','·ªé':'O','√ï':'O','·ªå':'O','√î':'O','·ªí':'O','·ªê':'O','·ªî':'O','·ªñ':'O','·ªò':'O','∆†':'O','·ªú':'O','·ªö':'O','·ªû':'O','·ª†':'O','·ª¢':'O',
    '√ô':'U','√ö':'U','·ª¶':'U','≈®':'U','·ª§':'U','∆Ø':'U','·ª™':'U','·ª®':'U','·ª¨':'U','·ªÆ':'U','·ª∞':'U','·ª≤':'Y','√ù':'Y','·ª∂':'Y','·ª∏':'Y','·ª¥':'Y',
    '√†':'a','√°':'a','·∫£':'a','√£':'a','·∫°':'a','ƒÉ':'a','·∫±':'a','·∫Ø':'a','·∫≥':'a','·∫µ':'a','·∫∑':'a','√¢':'a','·∫ß':'a','·∫•':'a','·∫©':'a','·∫´':'a','·∫≠':'a',
    'ƒë':'d','√®':'e','√©':'e','·∫ª':'e','·∫Ω':'e','·∫π':'e','√™':'e','·ªÅ':'e','·∫ø':'e','·ªÉ':'e','·ªÖ':'e','·ªá':'e','√¨':'i','√≠':'i','·ªâ':'i','ƒ©':'i','·ªã':'i',
    '√≤':'o','√≥':'o','·ªè':'o','√µ':'o','·ªç':'o','√¥':'o','·ªì':'o','·ªë':'o','·ªï':'o','·ªó':'o','·ªô':'o','∆°':'o','·ªù':'o','·ªõ':'o','·ªü':'o','·ª°':'o','·ª£':'o',
    '√π':'u','√∫':'u','·ªß':'u','≈©':'u','·ª•':'u','∆∞':'u','·ª´':'u','·ª©':'u','·ª≠':'u','·ªØ':'u','·ª±':'u','·ª≥':'y','√Ω':'y','·ª∑':'y','·ªπ':'y','·ªµ':'y',
  
    // Cyrillic
    '–ê':'A','–í':'B','–°':'C','–ï':'E','–ù':'H','–ö':'K','–ú':'M','–û':'O','–†':'P','–¢':'T','–•':'X','–Ü':'I',
    '–∞':'a','–µ':'e','–æ':'o','—Ä':'p','—Å':'c','—Ö':'x','–Ω':'n','—ñ':'i','—ï':'s','‘Å':'d','—ò':'j','‘õ':'q',
    '“ª':'h','”è':'l','‘ù':'w','‘ç':'g','‘É':'d','‘å':'G','“ë':'g','“ê':'G','–Å':'E','—ë':'e','–Ä':'E','—ê':'e',
    '–ô':'I','–π':'i','–â':'L','—ô':'l','–ä':'N','—ö':'n','–ã':'C','—õ':'c','–É':'G','—ì':'g','–é':'U','—û':'u',
    '–è':'D','—ü':'d','”ú':'Z','”ù':'z','”û':'Z','”ü':'z','“Æ':'Y','“Ø':'y','“∞':'U','“±':'u','“ö':'K','“õ':'k',
    '“¢':'N','“£':'n','”®':'O','”©':'o','”ò':'A','”ô':'a',
  
    // Greek
    'Œë':'A','Œí':'B','Œï':'E','Œñ':'Z','Œó':'H','Œô':'I','Œö':'K','Œú':'M','Œù':'N','Œü':'O','Œ°':'P','Œ§':'T','Œ•':'Y','Œß':'X',
    'Œ±':'a','Œ≤':'b','Œ≥':'y','Œ¥':'d','Œµ':'e','Œπ':'i','Œ∫':'k','Œº':'m','Œø':'o','œÅ':'p','œÑ':'t','œÖ':'u','œá':'x',
  
    // Fullwidth Latin
    'ÔΩÅ':'a','ÔΩÇ':'b','ÔΩÉ':'c','ÔΩÑ':'d','ÔΩÖ':'e','ÔΩÜ':'f','ÔΩá':'g','ÔΩà':'h','ÔΩâ':'i','ÔΩä':'j','ÔΩã':'k','ÔΩå':'l',
    'ÔΩç':'m','ÔΩé':'n','ÔΩè':'o','ÔΩê':'p','ÔΩë':'q','ÔΩí':'r','ÔΩì':'s','ÔΩî':'t','ÔΩï':'u','ÔΩñ':'v','ÔΩó':'w','ÔΩò':'x','ÔΩô':'y','ÔΩö':'z',
    'Ôº°':'A','Ôº¢':'B','Ôº£':'C','Ôº§':'D','Ôº•':'E','Ôº¶':'F','Ôºß':'G','Ôº®':'H','Ôº©':'I','Ôº™':'J','Ôº´':'K','Ôº¨':'L',
    'Ôº≠':'M','ÔºÆ':'N','ÔºØ':'O','Ôº∞':'P','Ôº±':'Q','Ôº≤':'R','Ôº≥':'S','Ôº¥':'T','Ôºµ':'U','Ôº∂':'V','Ôº∑':'W','Ôº∏':'X','Ôºπ':'Y','Ôº∫':'Z',
  
    // Superscript / Symbols
    '·¥Ä':'a','·¥Ñ':'c','·¥Ö':'d','·¥á':'e','…¢':'g',' ú':'h','…™':'i','·¥ä':'j','·¥ã':'k',' ü':'l','·¥ç':'m','…¥':'n',
    '·¥è':'o','·¥ò':'p','«´':'q',' Ä':'r','s':'s','·¥õ':'t','·¥ú':'u','·¥†':'v','·¥°':'w','x':'x',' è':'y','·¥¢':'z',
  
    // Diacritical Latin
    '≈Ç':'l','≈Å':'L','√ü':'ss','√û':'Th','√æ':'th','≈í':'OE','≈ì':'oe','√Ü':'AE','√¶':'ae',
    '√±':'n','√ë':'N','√ß':'c','√á':'C','√∏':'o','√ò':'O','√•':'a','√Ö':'A','√∞':'d','√ê':'D',
    '≈ã':'n','≈ä':'N','≈°':'s','≈†':'S','≈æ':'z','≈Ω':'Z','ƒç':'c','ƒå':'C','ƒè':'d','ƒé':'D',
    '≈•':'t','≈§':'T','≈Ø':'u','≈Æ':'U','ƒÖ':'a','ƒÑ':'A','ƒô':'e','ƒò':'E',
  
    // Modifier Letters & Phonetic Extensions
    ' ∞':'h',' ±':'h',' ≤':'j',' ≥':'r',' ¥':'r',' µ':'r',' ∂':'r',' ∑':'w',' ∏':'y',
    ' ∫':'"',' π':"'",' æ':"'",' ø':"'",'ÀÄ':'?','ÀÅ':'?','ÀÇ':'<','ÀÉ':'>','ÀÑ':'^','ÀÖ':'v',
    'Àá':'^','Àà':"'",'Àå':',','Àê':':','Àë':'.','Àû':'r','À§':'?','À†':'g','À°':'l','À£':'x',
  
    // IPA Extensions
    '…ê':'a','…ë':'a','…í':'a','…ì':'b',' ô':'b','…ï':'c','√ß':'c','…ó':'d','…ñ':'d','√∞':'d',
    ' §':'j','…ô':'e','…ò':'e','…õ':'e','…ú':'e','…û':'e','…ü':'j',' Ñ':'j','…°':'g','…¢':'g',
    ' õ':'g','…¶':'h',' ú':'h','ƒß':'h','…ß':'h','…®':'i','…™':'i',' ù':'j','…≠':'l',' ü':'l',
    '…±':'m','…Ø':'m','…∞':'m','≈ã':'n','…≤':'n','…≥':'n','…¥':'n','…µ':'o','√∏':'o','≈ì':'o',
    '…î':'o','…∂':'o','…∏':'f',' ã':'v',' å':'v',' ç':'w','…π':'r','…ª':'r',' Å':'r',' Ä':'r',
    ' É':'s',' Ç':'s','Œ∏':'t',' à':'t',' ß':'c',' ¶':'c',' ä':'u',' é':'y',' è':'y',' í':'z',
    ' ê':'z',' ë':'z',' î':'?',' ï':'?',' °':'?',' ò':'o','…•':'h',' û':'k','…¨':'l','…Æ':'l'
  };
  
 // H√†m chu·∫©n h√≥a c√¢u h·ªèi ho·∫∑c ƒë√°p √°n
 function normalize(text) {
  return text.toLowerCase()
    .split('')
    .map(char => latinMap[char] || char)
    .join('')
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, '')
    .replace(/[^a-z0-9 ]+/g, '')
    .replace(/\s+/g, ' ')
    .trim();
}

// H√†m t√≠nh ƒë·ªô gi·ªëng nhau Levenshtein
function levenshtein(a, b) {
  const matrix = Array.from({ length: a.length + 1 }, (_, i) =>
    Array.from({ length: b.length + 1 }, (_, j) => i === 0 ? j : j === 0 ? i : 0)
  );

  for (let i = 1; i <= a.length; i++) {
    for (let j = 1; j <= b.length; j++) {
      matrix[i][j] = Math.min(
        matrix[i - 1][j] + 1,
        matrix[i][j - 1] + 1,
        matrix[i - 1][j - 1] + (a[i - 1] === b[j - 1] ? 0 : 1)
      );
    }
  }
  return matrix[a.length][b.length];
}

// T√≠nh ph·∫ßn trƒÉm gi·ªëng nhau gi·ªØa hai chu·ªói
function similarity(a, b) {
  const normA = normalize(a);
  const normB = normalize(b);
  const distance = levenshtein(normA, normB);
  return 100 - (distance / Math.max(normA.length, normB.length)) * 100;
}

// T√¨m ƒë√°p √°n kh·ªõp nh·∫•t trong danh s√°ch options
function bestMatch(options, answer) {
  let bestIndex = 0;
  let highestScore = -1;

  for (let i = 0; i < options.length; i++) {
    const score = similarity(options[i], answer);
    if (score > highestScore) {
      highestScore = score;
      bestIndex = i;
    }
  }

  return bestIndex;
}

const quizBank = {
    "Ai l√† huynh ƒë·ªá v√† c≈©ng l√† ng∆∞·ªùi th·∫ßy m√† V∆∞∆°ng L√¢m trong Ti√™n Ngh·ªãch k√≠nh tr·ªçng nh·∫•t ?": "T∆∞ ƒê·ªì Nam",
    "Ai l√† m·∫π c·ªßa ƒê∆∞·ªùng Tam?": "A Ng√¢n",
    "Ai l√† ng∆∞·ªùi ƒë·ª©ng ƒë·∫ßu V≈© H·ªìn ƒêi·ªán?": "B·ªâ B·ªâ ƒê√¥ng",
    "Ai l√† ng∆∞·ªùi th·∫ßy c·ªßa ƒê∆∞·ªùng Tam?": "ƒê·∫°i S∆∞",
    "Ai l√† nh√¢n v·∫≠t ch√≠nh trong b·ªô phim ho·∫°t h√¨nh trung qu·ªëc Th·∫ßn M·ªô ?": "Th·∫ßn Nam",
    "√Åm tinh gi·ªõi ƒë∆∞·ª£c xu·∫•t hi·ªán trong b·ªô phim ho·∫°t h√¨nh n√†o d∆∞·ªõi ƒë√¢y ?": "Tinh Th·∫ßn Bi·∫øn",
    "B√°ch L√Ω ƒê√¥ng Qu√¢n l√† nh√¢n v·∫≠t trong b·ªô ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "Thi·∫øu Ni√™n B·∫°ch M√£ Tu√Ω Xu√¢n Phong",
    "B·∫°ch Nguy·ªát Kh√¥i l√† t√™n nh√¢n v·∫≠t ch√≠nh trong b·ªô phim ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "Linh Lung",
    "B·∫°ch Ti·ªÉu Thu·∫ßn l√† nh√¢n v·∫≠t ch√≠nh trong b·ªô ho·∫°t h√¨nh trung qu·ªëc n√†o ?": "Nh·∫•t Ni·ªám Vƒ©nh H·∫±ng",
    "B·∫°ch Ti·ªÉu Thu·∫ßn trong Nh·∫•t Ni·ªám Vƒ©nh H·∫±ng lu√¥n ƒë∆∞·ª£c ai √¢m th·∫ßm gi√∫p ƒë·ª° ?": "ƒê·ªó LƒÉng Ph·ªâ",
    "B·ªô phim n√†o sau ƒë√¢y thu·ªôc ti·ªÉu thuy·∫øt c·ªßa t√°c gi·∫£ Thi√™n T·∫±m Th·ªï ƒê·∫≠u": "T·∫•t c·∫£ ƒë√°p √°n",
    "C√°c c·∫•p b·∫≠c n√†o sau ƒë√¢y thu·ªôc phim ƒê·∫•u Ph√° Th∆∞∆°ng Khung ?": "ƒê·∫•u T√¥ng",
    "Ch√°u d∆∞·ª£ng c·ªßa B·∫°ch Ti·ªÉu Thu·∫ßn trong Nh·∫•t Ni·ªám Vƒ©nh H·∫±ng l√† ai ?": "T·ªëng Khuy·∫øt",
    "Ch·ªß nh√¢n ƒë·ªùi tr∆∞·ªõc c·ªßa V·∫´n L·∫°c T√¢m Vi√™m trong ƒê·∫•u Ph√° Th∆∞∆°ng Khung l√† ai ?": "Di·ªáu Thi√™n Ho·∫£",
    "C√¥ng ph√°p g√¨ gi√∫p Ti√™u Vi√™m trong ƒê·∫•u Ph√° Th∆∞∆°ng Khung h·∫•p th·ª• nhi·ªÅu lo·∫°i d·ªã h·ªèa ?": "Ph·∫ßn Quy·∫øt",
    "C√¥ng ph√°p n√†o sau ƒë√¢y l√† c·ªßa H√†n L·∫≠p trong Ph√†m Nh√¢n Tu Ti√™n ?": "T·∫•t c·∫£ ƒë√°p √°n",
    "C∆° T·ª≠ Nguy·ªát l√† nh√¢n v·∫≠t trong c√°c b·ªô ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "Gi√† Thi√™n",
    "D·∫° T√°ng c√≤n l√† bi·ªát danh c·ªßa ai trong Nh·∫•t Ni·ªám Vƒ©nh H·∫±ng ?": "B·∫°ch Ti·ªÉu Thu·∫ßn",
    "Danh x∆∞ng T√†n Thi B·∫°i Thu·∫ø l√† c·ªßa nh√¢n v·∫≠t n√†o trong Ho·∫° Giang H·ªì Chi B·∫•t L∆∞∆°ng Nh√¢n ?": "H√†ng Th·∫ßn",
    "Di·ªÖm Linh C∆° l√† nh√¢n v·∫≠t trong phim ho·∫°t h√¨nh trung qu·ªëc n√†o ?": "Thi√™n H√†nh C·ª≠u Ca",
    "Di·ªáp Ph√†m l√† nh√¢n v·∫≠t ch√≠nh trong b·ªô ho·∫°t h√¨nh trung qu·ªëc n√†o ?": "Gi√† Thi√™n",
    "Di·ªáp Th·∫ßn trong Ti√™n V√µ ƒê·∫ø T√¥n gia nh·∫≠p T√¥ng M√¥n n√†o ƒë·∫ßu ti√™n ?": "Ch√≠nh D∆∞∆°ng T√¥ng",
    "D∆∞·ª£c Tr·∫ßn trong ƒê·∫•u Ph√° Th∆∞∆°ng Khung ƒë√£ t·ª´ng b·ªã ƒë·ªì ƒë·ªá n√†o ph·∫£n b·ªôi ?": "H√†n Phong",
    "ƒê·∫°i ca c·ªßa Ti√™u Vi√™m trong ƒê·∫•u Ph√° Th∆∞∆°ng Khung t√™n g√¨ ?": "Ti√™u ƒê·ªânh",
    "ƒê√†m V√¢n l√† nh√¢n v·∫≠t ch√≠nh trong b·ªô phim ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "Ngh·ªãch Thi√™n Ch√≠ T√¥n",
    "ƒê·∫°o l·ªØ c·ªßa H√†n L·∫≠p l√† ai ?": "Nam Cung Uy·ªÉn",
    "ƒê√¢u l√† nh√¢n v·∫≠t ch√≠nh trong phim B√°ch Luy·ªán Th√†nh Th·∫ßn ?": "La Chinh",
    "ƒê√¢u l√† Th√°i C·ªï Th·∫≠p Hung trong phim Th·∫ø Gi·ªõi Ho√†n M·ªπ ?": "T·∫•t c·∫£ ƒë√°p √°n",
    "ƒê√¢u l√† tuy·ªát k·ªπ s·ªë 1 H·∫°o Thi√™n T√¥ng m√† ƒê∆∞·ªùng H·∫°o d·∫°y cho con trai trong ƒê·∫•u La ƒê·∫°i L·ª•c ?": "ƒê·∫°i Tu Di Ch√πy",
    "ƒê·∫•u S√°t To√†n Vi√™n Ki·∫øm l√† m·ªôt k·ªπ nƒÉng trong b·ªô phim ho·∫°t h√¨nh trung qu·ªëc n√†o ?": "Th·∫ßn ·∫§n V∆∞∆°ng T·ªça",
    "ƒê·ªôc C√¥ B√°c trong ƒê·∫•u La ƒê·∫°i L·ª•c c√≥ v≈© h·ªìn g√¨ ?": "B√≠ch L√¢n X√†",
    "Em trai ru·ªôt c·ªßa Th·∫°ch H·∫°o trong Th·∫ø Gi·ªõi Ho√†n M·ªπ l√† ai ?": "T·∫ßn H·∫°o",
    "H√†n l·∫≠p s·ªü h·ªØu nh·ªØng v·∫≠t ph·∫©m n√†o d∆∞·ªõi ƒë√¢y ?": "Thanh Tr√∫c Phong V√¢n Ki·∫øm",
    "H√†n L·∫≠p trong Ph√†m Nh√¢n Tu Ti√™n ƒë·∫øn Th·∫•t Huy·ªÅn M√¥n b√°i ai l√†m th·∫ßy ?": "M·∫∑c ƒê·∫°i Phu",
    "H√†n L·∫≠p trong Ph√†m Nh√¢n Tu Ti√™n gia nh·∫≠p m√¥n ph√°i n√†o ƒë·∫ßu ti√™n ?": "Th·∫•t Huy·ªÅn M√¥n",
    "H√†n L·∫≠p trong Ph√†m Nh√¢n Tu Ti√™n t·ª´ng c·ª©u ai m√† b·ªã h·∫•p th·ª• tu vi gi·∫£m xu·ªëng Luy·ªán Kh√≠ K·ª≥ ?": "Nam Cung Uy·ªÉn",
    "Hoang Thi√™n ƒê·∫ø l√† nh√¢n v·∫≠t ch√≠nh trong b·ªô phim ho·∫°t h√¨nh trung qu·ªëc n·ªïi ti·∫øng n√†o ?": "Th·∫ø Gi·ªõi Ho√†n M·ªπ",
    "Ho·∫Øc V≈© H·∫°o l√† h·∫≠u nh√¢n c·ªßa ai trong S·ª≠ Lai Kh·∫Øc ?": "ƒê√°i M·ªôc B·∫°ch",
    "H·ªìn ho√†n m√†u n√†o m·∫°nh nh·∫•t?": "ƒê·ªè",
    "Hu√¢n Nhi l√† c√¥ng ch√∫a c·ªßa b·ªô t·ªôc n√†o?": "C·ªï t·ªôc",
    "Kh√¥ L√¢u ƒê√† Ch·ªß xu·∫•t hi·ªán trong b·ªô phim ho·∫°t h√¨nh n√†o d∆∞·ªõi ƒë√¢y ?": "V√µ Th·∫ßn Ch√∫a T·ªÉ",
    "Khi ·ªü Gi√† Nam H·ªçc Vi·ªán, Ti√™u Vi√™m thu ph·ª•c ƒë∆∞·ª£c lo·∫°i d·ªã h·ªèa n√†o ?": "V·∫´n L·∫°c T√¢m Vi√™m",
    "K√≠nh Huy·ªÅn trong Quy·∫øn T∆∞ L∆∞·ª£ng l√† h·∫≠u du·ªá c·ªßa t·ªôc n√†o ?": "Th·∫ßn T·ªôc",
    "L·∫°c Ly trong ƒê·∫°i Ch√∫a T·ªÉ l√† nh√¢n v·∫≠t trong T·ªôc n√†o ?": "L·∫°c Th·∫ßn T·ªôc",
    "L√¢m ƒê·ªông trong V≈© ƒê·ªông C√†n Kh√¥n h·ªçc ƒë∆∞·ª£c Linh V√µ H·ªçc n√†o khi v√†o bia c·ªï ƒê·∫°i Hoang ?": "ƒê·∫°i Hoang T√π Thi√™n Ch·ªâ",
    "L√¢m ƒê·ªông trong V≈© ƒê·ªông C√†n Kh√¥n luy·ªán h√≥a T·ªï Ph√π n√†o ƒë·∫ßu ti√™n ?": "Th√¥n Ph·ªá T·ªï Ph√π",
    "L√¢m ƒê·ªông trong V≈© ƒê·ªông C√†n Kh√¥n s·ª≠ d·ª•ng v≈© kh√≠ lo·∫°i n√†o sau ƒë√¢y ?": "Th∆∞∆°ng",
    "L√¢m Phong l√† nh√¢n v·∫≠t trong b·ªô ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "V·∫°n Gi·ªõi ƒê·ªôc T√¥n",
    "L√¢m Th·∫•t D·∫° l√† nh√¢n v·∫≠t trong b·ªô ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "Tr·∫£m Th·∫ßn",
    "L√¢m Th·∫•t D·∫° trong Tr·∫£m Th·∫ßn s·ªü h·ªØu s·ª©c m·∫°nh c·ªßa v·ªã th·∫ßn n√†o ?": "Thi√™n S·ª©",
    "Long Tuy·ªÅn Ki·∫øm xu·∫•t hi·ªán trong b·ªô phim ho·∫°t h√¨nh n√†o d∆∞·ªõi ƒë√¢y ?": "H·ªça Giang H·ªì Chi B·∫•t L∆∞∆°ng Nh√¢n",
    "L·ª•c Tuy·∫øt K·ª≥ trong Tru Ti√™n thu·ªôc Phong n√†o trong Thanh V√¢n M√¥n?": "Ti·ªÉu Tr√∫c Phong",
    "L√Ω Tinh V√¢n trong H·ªça Giang H·ªì Chi B·∫•t L∆∞∆°ng Nh√¢n s·ª≠ d·ª•ng v≈© kh√≠ n√†o sau ƒë√¢y ?": "Long Tuy·ªÅn Ki·∫øm",
    "L√Ω Tinh V√¢n l√† m·ªôt nh√¢n v·∫≠t trong b·ªô phim ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "H·ªça Giang H·ªì Chi B·∫•t L∆∞∆°ng Nh√¢n",
    "L√Ω Tr∆∞·ªùng Th·ªç trong S∆∞ Huynh A S∆∞ Huynh xuy√™n kh√¥ng v·ªÅ H·ªìng Hoang b√°i s∆∞ ·ªü ƒë√¢u ?": "ƒê·ªô Ti√™n M√¥n",
    "Man H·ªì T·ª≠ trong phim \"Ph√†m Nh√¢n Tu Ti√™n\" tu luy·ªán c√¥ng ph√°p n√†o?": "Th√°c Thi√™n Ma C√¥ng",
    "M·∫´u th√¢n c·ªßa La Phong trong Th√¥n Ph·ªá Tinh Kh√¥ng t√™n l√† g√¨ ?": "Cung T√¢m Lan",
    "M·∫π c·ªßa M·∫°nh Xuy√™n trong Th∆∞∆°ng Nguy√™n ƒê·ªì t√™n l√† g√¨ ?": "B·∫°ch Ni·ªám V√¢n",
    "M·∫π c·ªßa T·∫ßn Tr·∫ßn l√† ai ?": "T·∫ßn Nguy·ªát Tr√¨",
    "M·∫π c·ªßa Th·∫°ch H·∫°o trong Th·∫ø Gi·ªõi Ho√†n M·ªπ t√™n l√† g√¨": "T·∫ßn Di Ninh",
    "M·ªëi t√¨nh ƒë·∫ßu c·ªßa Di·ªáp Th·∫ßn trong Ti√™n V√µ ƒê·∫ø T√¥n l√† ai ?": "C∆° Ng∆∞ng S∆∞∆°ng",
    "M·ª•c ƒë√≠ch tu luy·ªán c·ªßa V∆∞∆°ng L√¢m trong Ti√™n Ngh·ªãch theo di·ªÖn bi·∫øn phim hi·ªán t·∫°i l√† g√¨ ?": "B√°o Th√π",
    "M·ª•c Tr·∫ßn trong ƒê·∫°i Ch√∫a T·ªÉ li√™n k·∫øt Huy·∫øt M·∫°ch v·ªõi ?": "C·ª≠u U T∆∞·ªõc",
    "M·ª•c V√¢n l√† nh√¢n v·∫≠t trong b·ªô ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "V√¥ Th∆∞·ª£ng Th·∫ßn ƒê·∫ø",
    "Nam ch√≠nh trong b·ªô ho·∫°t h√¨nh trung qu·ªëc √Åm H√† Truy·ªán l√† ai ?": "T√¥ M·ªô V≈©",
    "Nam ch√≠nh trong b·ªô Quy·∫øn T∆∞ L∆∞·ª£ng l√† ai ?": "K√≠nh Huy·ªÅn",
    "Ngh·ªãch H√† T√¥ng l√† T√¥ng M√¥n trong b·ªô ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "Nh·∫•t Ni·ªám Vƒ©nh H·∫±ng",
    "Ngh·ªãch Thi√™n Nhi H√†nh l√† m·ªôt nh√¢n v·∫≠t trong b·ªô phim hh3d n√†o sau ƒë√¢y ?": "V≈© Canh K·ª∑",
    "Ng·ª•y Anh (Ng·ª•y V√¥ Ti·ªán) l√† nh√¢n v·∫≠t trong b·ªô hhtq n√†o sau ƒë√¢y ?": "Ma ƒê·∫°o T·ªï S∆∞",
    "Ng∆∞·ªùi b·∫°n thu·ªü nh·ªè c·ªßa Tr∆∞∆°ng Ti·ªÉu Ph√†m trong Tru Ti√™n l√† ai ?": "L√¢m Kinh V≈©",
    "Nh√¢n v·∫≠t B√°ch L√Ω ƒê·ªì Minh xu·∫•t hi·ªán trong phim ho·∫°t h√¨nh n√†o d∆∞·ªõi ƒë√¢y ?": "Tr·∫£m Th·∫ßn Chi Ph√†m Tr·∫ßn Th·∫ßn V·ª±c",
    "Nh√¢n v·∫≠t ch√≠nh c·ªßa \"Th·∫ßn ·∫§n V∆∞∆°ng T·ªça\" l√† ai?": "Long H·∫°o Th·∫ßn",
    "Nh√¢n v·∫≠t ch√≠nh c·ªßa ƒê·∫•u La ƒê·∫°i L·ª•c l√† ai?": "ƒê∆∞·ªùng Tam",
    "Nh√¢n v·∫≠t ch√≠nh L√Ω Tr∆∞·ªùng Th·ªç trong S∆∞ Huynh A S∆∞ Huynh ƒë√£ t·ªè t√¨nh v·ªõi ai ?": "V√¢n Ti√™u",
    "Nh√¢n v·∫≠t ch√≠nh trong Th∆∞∆°ng Nguy√™n ƒë·ªì l√† ai ?": "M·∫°nh Xuy√™n",
    "Nh√¢n v·∫≠t ch√≠nh trong Y√™u Th·∫ßn K√Ω t√™n l√† g√¨ ?": "Nhi·∫øp Ly",
    "Nh√¢n v·∫≠t ch√≠nh trong Man Hoang Ti√™n Gi·ªõi l√† ai ?": "L·ª•c H√†ng Chi",
    "Nh√¢n v·∫≠t n√†o lu√¥n b·∫•t b·∫°i trong phim Ho·∫°t H√¨nh Trung Qu·ªëc, ƒë∆∞·ª£c v√≠ nh∆∞ One-Punch Man ?": "T·ª´ D∆∞∆°ng",
    "Nh√¢n v·∫≠t n√†o sau ƒë√¢y ƒë∆∞·ª£c m·ªánh danh l√† Vua L·ª≥ ƒê√≤n trong ƒê·∫•u Ph√° Th∆∞∆°ng Khung ?": "Ph∆∞·ª£ng Thanh Nhi",
    "Nh·ªã ca c·ªßa Ti√™u Vi√™m trong ƒê·∫•u Ph√° Th∆∞∆°ng Khung t√™n g√¨ ?": "Ti√™u L·ªá",
    "Nhi·∫øp Phong l√† nh√¢n v·∫≠t ch√≠nh trong phim ho·∫°t h√¨nh trung qu·ªëc n√†o ?": "Ch√¢n V√µ ƒê·ªânh Phong",
    "Ninh Di√™u l√† m·ªôt nh√¢n v·∫≠t trong b·ªô phim ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "Ki·∫øm Lai",
    "N·ªØ ch√≠nh c≈©ng l√† v·ª£ ƒê√¥ng B√° Tuy·∫øt ∆Øng trong Tuy·∫øt ∆Øng Lƒ©nh Ch·ªß l√† ai sau ƒë√¢y ?": "D∆∞ Tƒ©nh Thu",
    "N·ªØ ch√≠nh trong b·ªô Quy·∫øn T∆∞ L∆∞·ª£ng l√† ai ?": "ƒê·ªì L·ªá",
    "√îng n·ªôi c·ªßa L√¢m ƒê·ªông trong V≈© ƒê·ªông C√†n Kh√¥n l√† ai ?": "L√¢m Ch·∫•n Thi√™n",
    "Ph·ª• Th√¢n c·ªßa L√¢m ƒê·ªông trong V≈© ƒê·ªông C√†n Kh√¥n l√† ai ?": "L√¢m Khi·∫øu",
    "Ph∆∞∆°ng H√†n l√† nh√¢n v·∫≠t trong b·ªô ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "Vƒ©nh Sinh",
    "Ph∆∞∆°ng H√†n trong Vƒ©nh Sinh nh·∫≠n ƒë∆∞·ª£c Giao Ph·ª•c Ho√†ng Tuy·ªÅn ƒê·ªì t·ª´ ai ?": "B·∫°ch H·∫£i Thi·ªán",
    "Ph∆∞∆°ng H√†n trong Vƒ©nh Sinh xu·∫•t th√¢n l√† g√¨ ·ªü nh√† h·ªç Ph∆∞∆°ng ?": "N√¥ B·ªôc",
    "Ph∆∞·ª£ng Thanh Nhi trong ƒê·∫•u Ph√° Th∆∞∆°ng Khung thu·ªôc ch·ªßng t·ªôc n√†o ?": "Thi√™n Y√™u Ho√†ng T·ªôc",
    "S·ªë hi·ªáu v·ªã th·∫ßn c·ªßa main trong Tr·∫£m Th·∫ßn: Ph√†m Tr·∫ßn Th·∫ßn V·ª±c l√† s·ªë m·∫•y ?": "003",
    "S·ª≠ Lai Kh·∫Øc Th·∫•t Qu√°i ƒë√£ t·ª´ng ƒë·∫øn n∆°i n√†o ƒë·ªÉ luy·ªán t·∫≠p?": "H·∫£i Th·∫ßn ƒê·∫£o",
    "S∆∞ m·∫´u c·ªßa B·∫°ch Ti·ªÉu Thu·∫ßn trong Nh·∫•t Ni·ªám Vƒ©nh H·∫±ng l√† ai ?": "H·ª©a M·ªã N∆∞∆°ng",
    "S∆∞ ph·ª• c·ªßa B·∫°ch Ti·ªÉu Thu·∫ßn trong Nh·∫•t Ni·ªám Vƒ©nh h·∫±ng l√† ai ?": "L√Ω Thanh H·∫≠u",
    "S∆∞ ph·ª• c·ªßa L√Ω Tr∆∞·ªùng Th·ªç l√† ai ?": "T·ªÅ Nguy√™n",
    "S∆∞ ph·ª• m√† Di·ªáp Th·∫ßn y√™u trong Ti√™n V√µ ƒê·∫ø T√¥n l√† ai ?": "S·ªü Huy√™n Nhi",
    "S∆∞ Ph·ª• th·ª© 2 c·ªßa L√Ω Tr∆∞·ªùng Th·ªç trong phim": "Th√°i Thanh Th√°nh Nh√¢n",
    "T·∫°i sao ƒê∆∞·ªùng Tam b·ªã ƒê∆∞·ªùng M√¥n truy s√°t ·ªü t·∫≠p ƒë·∫ßu phim ƒê·∫•u La ƒê·∫°i L·ª•c ?": "H·ªçc tr·ªôm tuy·ªát h·ªçc b·ªïn m√¥n",
    "T·∫ßn V≈© trong Tinh Th·∫ßn Bi·∫øn ƒë∆∞·ª£c t·∫∑ng ph√°p b·∫£o si√™u c·∫•p vip pro n√†o ƒë·ªÉ tu luy·ªán nhanh ch√≥ng ?": "Kh∆∞∆°ng Lan Th√°p",
    "T·∫ßn V≈© trong Tinh Th·∫ßn Bi·∫øn khi·∫øm khuy·∫øt ƒëan ƒëi·ªÅn nh·ªù ƒë√¢u m·ªõi c√≥ th·ªÉ tu luy·ªán ?": "L∆∞u Tinh L·ªá",
    "Th√°nh n·ªØ n√†o trong Gi√† Thi√™n b·ªã nh√¢n v·∫≠t ch√≠nh Di·ªáp Ph√†m l·∫•y m·∫•t c√°i √°o l√≥t ?": "Di√™u Hi",
    "Th·∫ßn Th√¥ng B√≠ C·∫£nh xu·∫•t hi·ªán trong b·ªô phim ho·∫°t h√¨nh n√†o d∆∞·ªõi ƒë√¢y ?": "Vƒ©nh Sinh",
    "Th·∫ßn v·ªã m√† ƒê∆∞·ªùng Tam ƒë·∫°t ƒë∆∞·ª£c l√† g√¨?": "H·∫£i Th·∫ßn v√† Tu La Th·∫ßn",
    "Th·∫ø l·ª±c n√†o l√† ƒë·ªëi th·ªß l·ªõn nh·∫•t c·ªßa Ti√™u Vi√™m trong ƒê·∫•u Ph√° Th∆∞∆°ng Khung?": "H·ªìn ƒêi·ªán",
    "Thi√™n Ho·∫£ T√¥n Gi·∫£ trong ƒê·∫•u Ph√° Th∆∞∆°ng Khung d√πng thi th·ªÉ c·ªßa ai ƒë·ªÉ h·ªìi sinh ?": "V√¢n S∆°n",
    "Th√∫ c∆∞ng Th√¥n Th√¥n trong Nguy√™n T√¥n sinh ra c√≥ s·ª©c m·∫°nh ngang c·∫£nh gi·ªõi n√†o ?": "Th√°i S∆° C·∫£nh",
    "Ti√™u Khinh Tuy·∫øt xu·∫•t hi·ªán trong b·ªô ho·∫°t h√¨nh n√†o d∆∞·ªõi ƒë√¢y ?": "Tuy·ªát Th·∫ø Chi·∫øn H·ªìn",
    "Ti√™u Vi√™m ƒë√£ l·∫≠p n√™n th·∫ø l·ª±c n√†o khi ·ªü H·ªçc Vi·ªán Gi√† Nam ?": "B√†n M√¥n",
    "Ti√™u Vi√™m trong ƒê·∫•u Ph√° Th∆∞∆°ng Khung ƒë√£ H·∫πn ∆Ø·ªõc 3 NƒÉm v·ªõi ai ?": "N·∫°p Lan Y√™n Nhi√™n",
    "Ti√™u Vi√™m trong ƒê·∫•u Ph√° Th∆∞∆°ng Khung s·ª≠ d·ª•ng lo·∫°i v≈© kh√≠ n√†o sau ƒë√¢y ?": "Th∆∞·ªõc",
    "Ti√™u Vi√™m trong ƒê·∫•u Ph√° Th∆∞∆°ng Khung thu·ªôc gia t·ªôc n√†o?": "Ti√™u gia",
    "Ti√™u Th·∫ßn l√† nh√¢n v·∫≠t ch√≠nh trong b·ªô phim ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "Tr∆∞·ªùng Sinh Gi·ªõi",
    "T√¨nh ƒë·∫ßu c·ªßa Di·ªáp Ph√†m trong Gi√† Thi√™n l√† ai ?": "L√Ω Ti·ªÉu M·∫°n",
    "Tr·∫ßn B√¨nh An l√† nam ch√≠nh trong b·ªô phim ho·∫°t h√¨nh trung qu·ªëc n√†o ?": "Ki·∫øm Lai",
    "Tri·ªáu Ng·ªçc Ch√¢n l√† nh√¢n v·∫≠t trong b·ªô ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "Thi·∫øu Ni√™n B·∫°ch M√£ Tu√Ω Xu√¢n Phong",
    "Trong b·ªô ƒê·∫•u Ph√° Th∆∞∆°ng Khung, Ti√™u Vi√™m t√¨m ƒë·∫øn ai ƒë·ªÉ c·ª©u D∆∞·ª£c L√£o ?": "Phong T√¥n Gi·∫£",
    "Trong b·ªô Ti√™n Ngh·ªãch, nh√¢n v·∫≠t ch√≠nh V∆∞∆°ng L√¢m khi ·ªü qu√™ nh√† c√≤n c√≥ t√™n kh√°c l√† g√¨ ?": "Thi·∫øt Tr·ª•",
    "Trong ƒê·∫•u La ƒê·∫°i L·ª•c, ƒê∆∞·ªùng H·∫°o l√† g√¨ c·ªßa ƒê∆∞·ªùng Tam?": "Cha",
    "Trong Gi√† Thi√™n, th·ªÉ ch·∫•t Di·ªáp Ph√†m l√† th·ªÉ ch·∫•t g√¨ ?": "Hoang C·ªï Th√°nh Th·ªÉ",
    "Trong Ph√†m Nh√¢n Tu Ti√™n ai b·ªã luy·ªán th√†nh kh√¥i l·ªói Kh√∫c H·ªìn ?": "Tr∆∞∆°ng Thi·∫øt",
    "Trong phim Ti√™n Ngh·ªãch, V∆∞∆°ng L√¢m v√¥ t√¨nh c√≥ ƒë∆∞·ª£c ph√°p b·∫£o ngh·ªãch thi√™n n√†o ?": "Thi√™n Ngh·ªãch Ch√¢u",
    "Trong Ti√™n Ngh·ªãch, V∆∞∆°ng L√¢m nh·∫≠n ƒë∆∞·ª£c truy·ªÅn th·ª´a g√¨ ·ªü C·ªï Th·∫ßn Chi ƒê·ªãa ?": "K√Ω ·ª®c",
    "Trong Tru Ti√™n, ƒêi·ªÅn B·∫•t D·ªãch l√† th·ªß t·ªça c·ªßa Phong n√†o?": "ƒê·∫°i Tr√∫c Phong",
    "Trong Vƒ©nh Sinh - Ph∆∞∆°ng H√†n h·∫πn ∆∞·ªõc 10 nƒÉm c√πng v·ªõi ai ?": "Hoa Thi√™n ƒê√¥",
    "Tr∆∞·ªõc khi ƒë·∫øn Linh Kh√™ T√¥ng, B·∫°ch Ti·ªÉu Thu·∫ßn trong Nh·∫•t Ni·ªám Vƒ©nh H·∫±ng ·ªü ƒë√¢u ?": "M·∫°o Nhi S∆°n Th√¥n",
    "Tr∆∞∆°ng Ti·ªÉu Ph√†m trong phim Tru Ti√™n c√≤n c√≥ t√™n g·ªçi l√† ?": "Qu·ª∑ L·ªá",
    "Tr∆∞∆°ng Ti·ªÉu Ph√†m trong Tru Ti√™n t·ª´ng ƒë∆∞·ª£c nh·∫≠n v√†o m√¥n ph√°i n√†o?": "Thanh V√¢n M√¥n",
    "T·ª≠ Nghi√™n trong ƒê·∫•u Ph√° Th∆∞∆°ng Khung thu·ªôc ch·ªßng t·ªôc n√†o ?": "Th√°i H∆∞ C·ªï Long",
    "V√¢n Tri·ªát l√† t√™n nh√¢n v·∫≠t ch√≠nh trong b·ªô phim ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "Ngh·ªãch Thi√™n T√† Th·∫ßn",
    "T·∫°i sao H√†n L·∫≠p khi g·∫∑p Phong Hi kh√¥ng ch·∫°y m√† ·ªü l·∫°i gi√∫p ƒë·ª° ch·∫ø t·∫°o Phong L√¥i S√≠ ?": "V√¨ ƒë√°nh kh√¥ng l·∫°i\".\"",
    "V≈© Canh l√† nh√¢n v·∫≠t trong b·ªô ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "V≈© Canh K·ª∑",
    "V≈© h·ªìn c·ªßa Chu Tr√∫c Thanh l√† g√¨?": "U Minh Linh Mi√™u",
    "V≈© h·ªìn c·ªßa ƒê·ªõi M·ªôc B·∫°ch l√† g√¨?": "B·∫°ch H·ªï",
    "V≈© h·ªìn c·ªßa M√£ H·ªìng Tu·∫•n l√† g√¨?": "H·ªèa Ph∆∞·ª£ng Ho√†ng",
    "V≈© h·ªìn c·ªßa Ti·ªÉu V≈© l√† g√¨?": "Nhu C·ªët Th·ªè",
    "V≈© h·ªìn th·ª© hai c·ªßa ƒê∆∞·ªùng Tam l√† g√¨?": "H·∫°o Thi√™n Ch√πy",
    "V≈© kh√≠ c·ªßa ƒê√†m V√¢n trong Ngh·ªãch Thi√™n Ch√≠ T√¥n l√† g√¨ ?": "H·ªìng M√¥ng Th·∫ßn Ki·∫øm",
    "V≈© kh√≠ m√† Ti√™u Vi√™m trong ƒê·∫•u Ph√° Th∆∞∆°ng Khung lu√¥n mang b√™n m√¨nh c√≥ t√™n g·ªçi l√† g√¨ ?": "Huy·ªÅn Tr·ªçng X√≠ch",
    "V∆∞∆°ng L√¢m trong phim Ti√™n Ngh·ªãch d·ª±a v√†o g√¨ ƒë·ªÉ v√¥ ƒë·ªãch c√πng c·∫£nh gi·ªõi ?": "C·ª±c c·∫£nh",
    "Y Lai Kh·∫Øc T∆∞ l√† m·ªôt nh√¢n v·∫≠t trong b·ªô phim ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "C·∫£ 1 v√† 2",
    "T·∫ßn M·ª•c l√† nh√¢n v·∫≠t ch√≠nh trong b·ªô phim ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "M·ª•c Th·∫ßn K√Ω",
    "M·ª•c ƒë√≠ch ch√≠nh tu luy·ªán c·ªßa T·∫ßn V≈© trong Tinh Th·∫ßn Bi·∫øn l√† g√¨ ??": "V√¨ mu·ªën ƒë∆∞·ª£c c∆∞·ªõi Kh∆∞∆°ng L·∫≠p",
    "Trong ƒê·∫•u Ph√° Th∆∞∆°ng Khung, Ti√™u Vi√™m h∆°n C·ªï H√† ·ªü ƒëi·ªÉm g√¨ ?": "D·ªã H·ªèa",
    "T·∫°i sao H√†n L·∫≠p khi g·∫∑p Phong Hi kh√¥ng ch·∫°y m√† ·ªü l·∫°i gi√∫p ƒë·ª° ch·∫ø t·∫°o Phong L√¥i S√≠ ?": "V√¨ ƒë√°nh kh√¥ng l·∫°i.",
    "Nh√¢n v·∫≠t ch√≠nh trong Ta C√≥ Th·ªÉ Gi√°c Ng·ªô V√¥ H·∫°n l√† ai ?": "Ti√™u V√¢n",
    "Nh√¢n v·∫≠t ch√≠nh trong ƒê·∫•u Chi·∫øn Thi√™n H·∫° l√† ai ?": "ƒê·∫°i Phong",
    "Nh√¢n v·∫≠t ch√≠nh trong Qu√¢n T·ª≠ V√¥ T·∫≠t l√† ai ?": "Dao C∆°",
    "Nh√¢n v·∫≠t ch√≠nh trong Man Hoang Ti√™n Gi·ªõi l√† ai ?": "L·ª•c H√†ng Chi",
    "1 Trong 2 Admin c·ªßa website HoatHinh3D l√† ai ? (Bi·ªát danh ch√≠nh x√°c ·ªü web)": "T·ª´ D∆∞∆°ng",
    "T·ªânh C·ª≠u l√† nh√¢n v·∫≠t ch√≠nh trong b·ªô phim ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "ƒê·∫°i ƒê·∫°o Tri·ªÅu Thi√™n",
    "T·∫ßn Nam l√† nh√¢n v·∫≠t ch√≠nh trong b·ªô ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "Tuy·ªát Th·∫ø Chi·∫øn H·ªìn",
};

const normalizedBank = {};
  for (const key in quizBank) {
    normalizedBank[normalize(key)] = quizBank[key];
  }

  // H√†m g·ª≠i ƒë√°p √°n v√† hi·ªÉn th·ªã k·∫øt qu·∫£
  async function saveQuizResult(question, answerIndex, index) {
    try {
      const response = await fetch(HH3D_AJAX_URL, {
        method: "POST",
        headers: { "Content-Type": "application/x-www-form-urlencoded" },
        body: new URLSearchParams({
          action: "save_quiz_result",
          question_id: question.id,
          answer: answerIndex
        })
      });
      const result = await response.json();
      const isCorrect = parseInt(result.data?.is_correct || 0, 10);
      const answerText = typeof question.options[answerIndex] === 'string'
        ? question.options[answerIndex]
        : question.options[answerIndex].content;

      const status = isCorrect === 1 ? '‚úÖ' : '‚ùå';
      const message = `
        ${status} <b>C√¢u ${index + 1}</b><br>
        üìå ${question.question}<br>
        üì• <i>${answerText}</i><br>
        üéØ ${result.data?.message || "Kh√¥ng r√µ k·∫øt qu·∫£"}
      `;
      showNotificationUI(message, isCorrect === 1 ? 'success' : 'error');
    } catch (error) {
      showNotificationUI(`‚ùå C√¢u ${index + 1}<br>L·ªói khi g·ª≠i ƒë√°p √°n`, 'error');
    }
  }

  // B·∫Øt ƒë·∫ßu x·ª≠ l√Ω
  const res = await postRequest(
    HH3D_AJAX_URL,
    { 'Content-Type': 'application/x-www-form-urlencoded' },
    new URLSearchParams({ action: 'load_quiz_data' })
  );

  if (!res.success || !res.data?.questions) {
    showNotificationUI("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c danh s√°ch c√¢u h·ªèi", 'error');
    return;
  }

  if (res.data.completed) {
    showNotificationUI("‚úÖ V·∫•n ƒê√°p ƒë√£ ho√†n th√†nh h√¥m nay", 'success');
    return;
  }

  const questions = res.data.questions;

  for (let i = 0; i < questions.length; i++) {
    const q = questions[i];
    if (q.is_correct !== "0") continue;

    const normalizedQuestion = normalize(q.question);
    const answer = normalizedBank[normalizedQuestion];

    if (!answer) {
      showNotificationUI(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ƒë√°p √°n cho c√¢u:<br>${q.question}`, 'error');
      continue;
    }

    const options = q.options.map(opt => typeof opt === 'string' ? opt : opt.content);
    const bestAnswerIndex = bestMatch(options, answer);

    await saveQuizResult(q, bestAnswerIndex, i);
    await new Promise(resolve => setTimeout(resolve, 500));
  }

  showNotificationUI("üéâ ƒê√£ ho√†n th√†nh to√†n b·ªô v·∫•n ƒë√°p", 'success');
})();
